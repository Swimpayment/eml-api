/*
 * Finac API
 * <b>Version Notes:- <br/>• All amounts fields in requests and responses have been changed from decimal to int64(cents). This means that 10.00 in version 1, is 1000 in version 2.<br/>• ThreeDS endpoints have been added to this version. These will replace the KBA endpoints from version 1.</br>• AccountId endpoint has changed HTTP verb from GET to POST, furthermore additional cardholder details need to be provided as part of the HTTP body.</b>
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinacApi);
  }
}(this, function(expect, FinacApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FinacApi.AccountApi();
  });

  describe('(package)', function() {
    describe('AccountApi', function() {
      describe('apiAccountAccountIdPost', function() {
        it('should call apiAccountAccountIdPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountAccountIdPost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountAccountIdPost(apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.AccountIdV2ViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountAccountLinkPXSXPost', function() {
        it('should call apiAccountAccountLinkPXSXPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountAccountLinkPXSXPost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountAccountLinkPXSXPost(apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.AccountLinkPXSXViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountAllowRegistrationPost', function() {
        it('should call apiAccountAllowRegistrationPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountAllowRegistrationPost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountAllowRegistrationPost(apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.AllowRegistrationViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountCardholderToCardholderTransferPost', function() {
        it('should call apiAccountCardholderToCardholderTransferPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountCardholderToCardholderTransferPost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountCardholderToCardholderTransferPost(apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.CardholderToCardholderViewModelV2ValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountConditionGroupGet', function() {
        it('should call apiAccountConditionGroupGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountConditionGroupGet call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountConditionGroupGet(apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.ConditionGroupGetViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountConditionGroupPost', function() {
        it('should call apiAccountConditionGroupPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountConditionGroupPost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountConditionGroupPost(apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.ConditionGroupInsertViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountFXQuotePost', function() {
        it('should call apiAccountFXQuotePost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountFXQuotePost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountFXQuotePost(apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.FXQuoteViewModelV2ValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountFXTradePost', function() {
        it('should call apiAccountFXTradePost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountFXTradePost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountFXTradePost(apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.FXTradeV2ViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdAccountToAccountTradePost', function() {
        it('should call apiAccountIdAccountToAccountTradePost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdAccountToAccountTradePost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdAccountToAccountTradePost(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.TradeViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdAddCurrencyPost', function() {
        it('should call apiAccountIdAddCurrencyPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdAddCurrencyPost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdAddCurrencyPost(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.AddCurrencyViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdBalanceGet', function() {
        it('should call apiAccountIdBalanceGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdBalanceGet call and complete the assertions
          /*

          instance.apiAccountIdBalanceGet(id, apiVersion, authorization, fMessageId, fOrigin, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.BalanceV2ViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdCardNumberPost', function() {
        it('should call apiAccountIdCardNumberPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdCardNumberPost call and complete the assertions
          /*

          instance.apiAccountIdCardNumberPost(id, apiVersion, authorization, fMessageId, fOrigin, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.GetCardNumberViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdCheckLoadGet', function() {
        it('should call apiAccountIdCheckLoadGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdCheckLoadGet call and complete the assertions
          /*

          instance.apiAccountIdCheckLoadGet(id, apiVersion, authorization, fMessageId, fOrigin, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.CheckLoadViewModelV2ValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdConditionCheckPatch', function() {
        it('should call apiAccountIdConditionCheckPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdConditionCheckPatch call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdConditionCheckPatch(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.ConditionCheckViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdCurrenciesGet', function() {
        it('should call apiAccountIdCurrenciesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdCurrenciesGet call and complete the assertions
          /*

          instance.apiAccountIdCurrenciesGet(id, apiVersion, authorization, fMessageId, fOrigin, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.AccountCurrenciesViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdCvvPost', function() {
        it('should call apiAccountIdCvvPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdCvvPost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdCvvPost(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.GetCvvViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdDetailsGet', function() {
        it('should call apiAccountIdDetailsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdDetailsGet call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdDetailsGet(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.AccountDetailsViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdExpiryDatePost', function() {
        it('should call apiAccountIdExpiryDatePost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdExpiryDatePost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdExpiryDatePost(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.GetExpiryDateViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdFeeDebitPost', function() {
        it('should call apiAccountIdFeeDebitPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdFeeDebitPost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdFeeDebitPost(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.FeeViewModelV2ValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdForgotPasswordPatch', function() {
        it('should call apiAccountIdForgotPasswordPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdForgotPasswordPatch call and complete the assertions
          /*

          instance.apiAccountIdForgotPasswordPatch(id, apiVersion, authorization, fMessageId, fOrigin, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.ForgotPasswordViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdFullLoadsGet', function() {
        it('should call apiAccountIdFullLoadsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdFullLoadsGet call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdFullLoadsGet(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.FullLoadsV2ViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdGet', function() {
        it('should call apiAccountIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdGet call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdGet(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.InquiryV2ViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdKycCodeDetailsGet', function() {
        it('should call apiAccountIdKycCodeDetailsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdKycCodeDetailsGet call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdKycCodeDetailsGet(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.KycCodeDetailsViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdKycCodePost', function() {
        it('should call apiAccountIdKycCodePost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdKycCodePost call and complete the assertions
          /*

          instance.apiAccountIdKycCodePost(id, apiVersion, authorization, fMessageId, fOrigin, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.KycGenerateCodeViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdKycLinkPost', function() {
        it('should call apiAccountIdKycLinkPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdKycLinkPost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdKycLinkPost(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.KycLinkViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdLatestCardNumberGet', function() {
        it('should call apiAccountIdLatestCardNumberGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdLatestCardNumberGet call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdLatestCardNumberGet(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.RetrieveLatestCardViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdLatestGet', function() {
        it('should call apiAccountIdLatestGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdLatestGet call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdLatestGet(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.RetrieveLatestCardHolderViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdLevelLimitGet', function() {
        it('should call apiAccountIdLevelLimitGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdLevelLimitGet call and complete the assertions
          /*

          instance.apiAccountIdLevelLimitGet(id, apiVersion, authorization, fMessageId, fOrigin, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.CardholderLevelLimitsV2ViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdLevelLimitPatch', function() {
        it('should call apiAccountIdLevelLimitPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdLevelLimitPatch call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdLevelLimitPatch(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.SetCardholderLevelLimitsViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdLoadsGet', function() {
        it('should call apiAccountIdLoadsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdLoadsGet call and complete the assertions
          /*

          instance.apiAccountIdLoadsGet(id, apiVersion, authorization, fMessageId, fOrigin, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.LoadsV2ViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdLockUnlockPatch', function() {
        it('should call apiAccountIdLockUnlockPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdLockUnlockPatch call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdLockUnlockPatch(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.LockUnlockViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdMccDelete', function() {
        it('should call apiAccountIdMccDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdMccDelete call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdMccDelete(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.MccBlockViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdMccGet', function() {
        it('should call apiAccountIdMccGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdMccGet call and complete the assertions
          /*

          instance.apiAccountIdMccGet(id, apiVersion, authorization, fMessageId, fOrigin, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.MccViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdMccPost', function() {
        it('should call apiAccountIdMccPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdMccPost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdMccPost(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.MccBlockViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdNominatedPersonGet', function() {
        it('should call apiAccountIdNominatedPersonGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdNominatedPersonGet call and complete the assertions
          /*

          instance.apiAccountIdNominatedPersonGet(id, apiVersion, authorization, fMessageId, fOrigin, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.NominatedPersonGetViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdNominatedPersonPatch', function() {
        it('should call apiAccountIdNominatedPersonPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdNominatedPersonPatch call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdNominatedPersonPatch(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.NominatedPersonPutViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdNominatedPersonPost', function() {
        it('should call apiAccountIdNominatedPersonPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdNominatedPersonPost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdNominatedPersonPost(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.NominatedPersonPutViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdPINReminderGet', function() {
        it('should call apiAccountIdPINReminderGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdPINReminderGet call and complete the assertions
          /*

          instance.apiAccountIdPINReminderGet(id, apiVersion, authorization, fMessageId, fOrigin, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.PINReminderViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdPatch', function() {
        it('should call apiAccountIdPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdPatch call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdPatch(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.AccountUpdateViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdPayeeGet', function() {
        it('should call apiAccountIdPayeeGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdPayeeGet call and complete the assertions
          /*

          instance.apiAccountIdPayeeGet(id, apiVersion, authorization, fMessageId, fOrigin, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.PayeesViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdPhysicalCardPatch', function() {
        it('should call apiAccountIdPhysicalCardPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdPhysicalCardPatch call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdPhysicalCardPatch(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.PhysicalCardViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdPinPost', function() {
        it('should call apiAccountIdPinPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdPinPost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdPinPost(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.PinViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdPurchaseOnUsPost', function() {
        it('should call apiAccountIdPurchaseOnUsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdPurchaseOnUsPost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdPurchaseOnUsPost(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.PurchaseOnUsViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdRedeemKycCodePatch', function() {
        it('should call apiAccountIdRedeemKycCodePatch successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdRedeemKycCodePatch call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdRedeemKycCodePatch(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.KycRedeemCodeViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdRegisterClientPatch', function() {
        it('should call apiAccountIdRegisterClientPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdRegisterClientPatch call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdRegisterClientPatch(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.RegisterViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdReissuePost', function() {
        it('should call apiAccountIdReissuePost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdReissuePost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdReissuePost(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.ReissueV2ViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdRemoveLoadLimitDelete', function() {
        it('should call apiAccountIdRemoveLoadLimitDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdRemoveLoadLimitDelete call and complete the assertions
          /*

          instance.apiAccountIdRemoveLoadLimitDelete(id, apiVersion, authorization, fMessageId, fOrigin, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.RemoveLoadLimitViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdReplacePost', function() {
        it('should call apiAccountIdReplacePost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdReplacePost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdReplacePost(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.ReplaceViewModelV2ValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdResendKycCodePost', function() {
        it('should call apiAccountIdResendKycCodePost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdResendKycCodePost call and complete the assertions
          /*

          instance.apiAccountIdResendKycCodePost(id, apiVersion, authorization, fMessageId, fOrigin, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.KycResendCodeViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdResetPasswordPatch', function() {
        it('should call apiAccountIdResetPasswordPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdResetPasswordPatch call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdResetPasswordPatch(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.ResetPasswordViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdSecondaryGet', function() {
        it('should call apiAccountIdSecondaryGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdSecondaryGet call and complete the assertions
          /*

          instance.apiAccountIdSecondaryGet(id, apiVersion, authorization, fMessageId, fOrigin, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.SecondaryAccountViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdSensitiveDataTokenPost', function() {
        it('should call apiAccountIdSensitiveDataTokenPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdSensitiveDataTokenPost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdSensitiveDataTokenPost(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.SensitiveDataTokenViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdSpendControlGet', function() {
        it('should call apiAccountIdSpendControlGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdSpendControlGet call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdSpendControlGet(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.GetSpendControlViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdSpendControlPost', function() {
        it('should call apiAccountIdSpendControlPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdSpendControlPost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdSpendControlPost(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.SpendControlViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdStatusGet', function() {
        it('should call apiAccountIdStatusGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdStatusGet call and complete the assertions
          /*

          instance.apiAccountIdStatusGet(id, apiVersion, authorization, fMessageId, fOrigin, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.GetStatusViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdStatusPatch', function() {
        it('should call apiAccountIdStatusPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdStatusPatch call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdStatusPatch(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.ChangeStatusViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdToggleIbanGet', function() {
        it('should call apiAccountIdToggleIbanGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdToggleIbanGet call and complete the assertions
          /*

          instance.apiAccountIdToggleIbanGet(id, apiVersion, authorization, fMessageId, fOrigin, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.GetToggleIbanViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdToggleIbanPatch', function() {
        it('should call apiAccountIdToggleIbanPatch successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdToggleIbanPatch call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdToggleIbanPatch(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.ToggleIbanViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdTransactionsGet', function() {
        it('should call apiAccountIdTransactionsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdTransactionsGet call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdTransactionsGet(id, startDate, endDate, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.TransactionsViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdTransferDetailsPost', function() {
        it('should call apiAccountIdTransferDetailsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdTransferDetailsPost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdTransferDetailsPost(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.TransferDetailsViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdUpgradeCardPost', function() {
        it('should call apiAccountIdUpgradeCardPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdUpgradeCardPost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdUpgradeCardPost(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.UpgradeCardViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdUsageGet', function() {
        it('should call apiAccountIdUsageGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdUsageGet call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdUsageGet(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.CardUsageViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdUseDataTokenGet', function() {
        it('should call apiAccountIdUseDataTokenGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdUseDataTokenGet call
          /*
          var opts = {};

          instance.apiAccountIdUseDataTokenGet(id, apiVersion, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountIdValidatePinPost', function() {
        it('should call apiAccountIdValidatePinPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountIdValidatePinPost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountIdValidatePinPost(id, apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.ValidatePinViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountKYCUploadDocumentsPost', function() {
        it('should call apiAccountKYCUploadDocumentsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountKYCUploadDocumentsPost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountKYCUploadDocumentsPost(apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.KYCUploadDocumentsViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountLoginPost', function() {
        it('should call apiAccountLoginPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountLoginPost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountLoginPost(apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.ValidateLoginViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountNumberOfDocumentsGet', function() {
        it('should call apiAccountNumberOfDocumentsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountNumberOfDocumentsGet call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountNumberOfDocumentsGet(apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.GetNumberOfDocumentsViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountPost', function() {
        it('should call apiAccountPost successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountPost call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountPost(apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.IssueViewModelV2ValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountReferenceAttemptedRegistrationsGet', function() {
        it('should call apiAccountReferenceAttemptedRegistrationsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountReferenceAttemptedRegistrationsGet call and complete the assertions
          /*

          instance.apiAccountReferenceAttemptedRegistrationsGet(reference, apiVersion, authorization, fMessageId, fOrigin, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.CheckAttemptedRegistrationViewModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAccountSepaTransactionCountGet', function() {
        it('should call apiAccountSepaTransactionCountGet successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAccountSepaTransactionCountGet call and complete the assertions
          /*
          var opts = {};

          instance.apiAccountSepaTransactionCountGet(apiVersion, authorization, fMessageId, fOrigin, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(FinacApi.SepaTransactionCountBindingModelValidResponsePackage);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
