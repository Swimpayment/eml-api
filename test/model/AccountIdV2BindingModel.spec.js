/*
 * Finac API
 * <b>Version Notes:- <br/>• All amounts fields in requests and responses have been changed from decimal to int64(cents). This means that 10.00 in version 1, is 1000 in version 2.<br/>• ThreeDS endpoints have been added to this version. These will replace the KBA endpoints from version 1.</br>• AccountId endpoint has changed HTTP verb from GET to POST, furthermore additional cardholder details need to be provided as part of the HTTP body.</b>
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinacApi);
  }
}(this, function(expect, FinacApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('AccountIdV2BindingModel', function() {
      beforeEach(function() {
        instance = new FinacApi.AccountIdV2BindingModel();
      });

      it('should create an instance of AccountIdV2BindingModel', function() {
        // TODO: update the code to test AccountIdV2BindingModel
        expect(instance).to.be.a(FinacApi.AccountIdV2BindingModel);
      });

      it('should have the property cardNumber (base name: "cardNumber")', function() {
        // TODO: update the code to test the property cardNumber
        expect(instance).to.have.property('cardNumber');
        // expect(instance.cardNumber).to.be(expectedValueLiteral);
      });

      it('should have the property phone (base name: "phone")', function() {
        // TODO: update the code to test the property phone
        expect(instance).to.have.property('phone');
        // expect(instance.phone).to.be(expectedValueLiteral);
      });

      it('should have the property address (base name: "address")', function() {
        // TODO: update the code to test the property address
        expect(instance).to.have.property('address');
        // expect(instance.address).to.be(expectedValueLiteral);
      });

      it('should have the property zipCode (base name: "zipCode")', function() {
        // TODO: update the code to test the property zipCode
        expect(instance).to.have.property('zipCode');
        // expect(instance.zipCode).to.be(expectedValueLiteral);
      });

      it('should have the property dateOfBirth (base name: "dateOfBirth")', function() {
        // TODO: update the code to test the property dateOfBirth
        expect(instance).to.have.property('dateOfBirth');
        // expect(instance.dateOfBirth).to.be(expectedValueLiteral);
      });

      it('should have the property securityQuestion (base name: "securityQuestion")', function() {
        // TODO: update the code to test the property securityQuestion
        expect(instance).to.have.property('securityQuestion');
        // expect(instance.securityQuestion).to.be(expectedValueLiteral);
      });

      it('should have the property securityAnswer (base name: "securityAnswer")', function() {
        // TODO: update the code to test the property securityAnswer
        expect(instance).to.have.property('securityAnswer');
        // expect(instance.securityAnswer).to.be(expectedValueLiteral);
      });

      it('should have the property userDefined1 (base name: "userDefined1")', function() {
        // TODO: update the code to test the property userDefined1
        expect(instance).to.have.property('userDefined1');
        // expect(instance.userDefined1).to.be(expectedValueLiteral);
      });

      it('should have the property userDefined2 (base name: "userDefined2")', function() {
        // TODO: update the code to test the property userDefined2
        expect(instance).to.have.property('userDefined2');
        // expect(instance.userDefined2).to.be(expectedValueLiteral);
      });

      it('should have the property userDefined3 (base name: "userDefined3")', function() {
        // TODO: update the code to test the property userDefined3
        expect(instance).to.have.property('userDefined3');
        // expect(instance.userDefined3).to.be(expectedValueLiteral);
      });

      it('should have the property userDefined4 (base name: "userDefined4")', function() {
        // TODO: update the code to test the property userDefined4
        expect(instance).to.have.property('userDefined4');
        // expect(instance.userDefined4).to.be(expectedValueLiteral);
      });

    });
  });

}));
