/*
 * Finac API
 * <b>Version Notes:- <br/>• All amounts fields in requests and responses have been changed from decimal to int64(cents). This means that 10.00 in version 1, is 1000 in version 2.<br/>• ThreeDS endpoints have been added to this version. These will replace the KBA endpoints from version 1.</br>• AccountId endpoint has changed HTTP verb from GET to POST, furthermore additional cardholder details need to be provided as part of the HTTP body.</b>
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinacApi);
  }
}(this, function(expect, FinacApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('IssueBindingModelV2', function() {
      beforeEach(function() {
        instance = new FinacApi.IssueBindingModelV2();
      });

      it('should create an instance of IssueBindingModelV2', function() {
        // TODO: update the code to test IssueBindingModelV2
        expect(instance).to.be.a(FinacApi.IssueBindingModelV2);
      });

      it('should have the property firstName (base name: "firstName")', function() {
        // TODO: update the code to test the property firstName
        expect(instance).to.have.property('firstName');
        // expect(instance.firstName).to.be(expectedValueLiteral);
      });

      it('should have the property middleInitial (base name: "middleInitial")', function() {
        // TODO: update the code to test the property middleInitial
        expect(instance).to.have.property('middleInitial');
        // expect(instance.middleInitial).to.be(expectedValueLiteral);
      });

      it('should have the property lastName (base name: "lastName")', function() {
        // TODO: update the code to test the property lastName
        expect(instance).to.have.property('lastName');
        // expect(instance.lastName).to.be(expectedValueLiteral);
      });

      it('should have the property address1 (base name: "address1")', function() {
        // TODO: update the code to test the property address1
        expect(instance).to.have.property('address1');
        // expect(instance.address1).to.be(expectedValueLiteral);
      });

      it('should have the property address2 (base name: "address2")', function() {
        // TODO: update the code to test the property address2
        expect(instance).to.have.property('address2');
        // expect(instance.address2).to.be(expectedValueLiteral);
      });

      it('should have the property address3 (base name: "address3")', function() {
        // TODO: update the code to test the property address3
        expect(instance).to.have.property('address3');
        // expect(instance.address3).to.be(expectedValueLiteral);
      });

      it('should have the property address4 (base name: "address4")', function() {
        // TODO: update the code to test the property address4
        expect(instance).to.have.property('address4');
        // expect(instance.address4).to.be(expectedValueLiteral);
      });

      it('should have the property city (base name: "city")', function() {
        // TODO: update the code to test the property city
        expect(instance).to.have.property('city');
        // expect(instance.city).to.be(expectedValueLiteral);
      });

      it('should have the property county (base name: "county")', function() {
        // TODO: update the code to test the property county
        expect(instance).to.have.property('county');
        // expect(instance.county).to.be(expectedValueLiteral);
      });

      it('should have the property state (base name: "state")', function() {
        // TODO: update the code to test the property state
        expect(instance).to.have.property('state');
        // expect(instance.state).to.be(expectedValueLiteral);
      });

      it('should have the property zipCode (base name: "zipCode")', function() {
        // TODO: update the code to test the property zipCode
        expect(instance).to.have.property('zipCode');
        // expect(instance.zipCode).to.be(expectedValueLiteral);
      });

      it('should have the property countryCode (base name: "countryCode")', function() {
        // TODO: update the code to test the property countryCode
        expect(instance).to.have.property('countryCode');
        // expect(instance.countryCode).to.be(expectedValueLiteral);
      });

      it('should have the property dateOfBirth (base name: "dateOfBirth")', function() {
        // TODO: update the code to test the property dateOfBirth
        expect(instance).to.have.property('dateOfBirth');
        // expect(instance.dateOfBirth).to.be(expectedValueLiteral);
      });

      it('should have the property landline (base name: "landline")', function() {
        // TODO: update the code to test the property landline
        expect(instance).to.have.property('landline');
        // expect(instance.landline).to.be(expectedValueLiteral);
      });

      it('should have the property securityQuestion (base name: "securityQuestion")', function() {
        // TODO: update the code to test the property securityQuestion
        expect(instance).to.have.property('securityQuestion');
        // expect(instance.securityQuestion).to.be(expectedValueLiteral);
      });

      it('should have the property securityAnswer (base name: "securityAnswer")', function() {
        // TODO: update the code to test the property securityAnswer
        expect(instance).to.have.property('securityAnswer');
        // expect(instance.securityAnswer).to.be(expectedValueLiteral);
      });

      it('should have the property securityField3 (base name: "securityField3")', function() {
        // TODO: update the code to test the property securityField3
        expect(instance).to.have.property('securityField3');
        // expect(instance.securityField3).to.be(expectedValueLiteral);
      });

      it('should have the property securityField4 (base name: "securityField4")', function() {
        // TODO: update the code to test the property securityField4
        expect(instance).to.have.property('securityField4');
        // expect(instance.securityField4).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property userDefined1 (base name: "userDefined1")', function() {
        // TODO: update the code to test the property userDefined1
        expect(instance).to.have.property('userDefined1');
        // expect(instance.userDefined1).to.be(expectedValueLiteral);
      });

      it('should have the property userDefined2 (base name: "userDefined2")', function() {
        // TODO: update the code to test the property userDefined2
        expect(instance).to.have.property('userDefined2');
        // expect(instance.userDefined2).to.be(expectedValueLiteral);
      });

      it('should have the property userDefined3 (base name: "userDefined3")', function() {
        // TODO: update the code to test the property userDefined3
        expect(instance).to.have.property('userDefined3');
        // expect(instance.userDefined3).to.be(expectedValueLiteral);
      });

      it('should have the property userDefined4 (base name: "userDefined4")', function() {
        // TODO: update the code to test the property userDefined4
        expect(instance).to.have.property('userDefined4');
        // expect(instance.userDefined4).to.be(expectedValueLiteral);
      });

      it('should have the property socialSecurityNumber (base name: "socialSecurityNumber")', function() {
        // TODO: update the code to test the property socialSecurityNumber
        expect(instance).to.have.property('socialSecurityNumber');
        // expect(instance.socialSecurityNumber).to.be(expectedValueLiteral);
      });

      it('should have the property distributorCode (base name: "distributorCode")', function() {
        // TODO: update the code to test the property distributorCode
        expect(instance).to.have.property('distributorCode');
        // expect(instance.distributorCode).to.be(expectedValueLiteral);
      });

      it('should have the property companyName (base name: "companyName")', function() {
        // TODO: update the code to test the property companyName
        expect(instance).to.have.property('companyName');
        // expect(instance.companyName).to.be(expectedValueLiteral);
      });

      it('should have the property cardStyle (base name: "cardStyle")', function() {
        // TODO: update the code to test the property cardStyle
        expect(instance).to.have.property('cardStyle');
        // expect(instance.cardStyle).to.be(expectedValueLiteral);
      });

      it('should have the property embossName (base name: "embossName")', function() {
        // TODO: update the code to test the property embossName
        expect(instance).to.have.property('embossName');
        // expect(instance.embossName).to.be(expectedValueLiteral);
      });

      it('should have the property expirationDate (base name: "expirationDate")', function() {
        // TODO: update the code to test the property expirationDate
        expect(instance).to.have.property('expirationDate');
        // expect(instance.expirationDate).to.be(expectedValueLiteral);
      });

      it('should have the property isProducePlastic (base name: "isProducePlastic")', function() {
        // TODO: update the code to test the property isProducePlastic
        expect(instance).to.have.property('isProducePlastic');
        // expect(instance.isProducePlastic).to.be(expectedValueLiteral);
      });

      it('should have the property deliveryType (base name: "deliveryType")', function() {
        // TODO: update the code to test the property deliveryType
        expect(instance).to.have.property('deliveryType');
        // expect(instance.deliveryType).to.be(expectedValueLiteral);
      });

      it('should have the property secondaryAddress1 (base name: "secondaryAddress1")', function() {
        // TODO: update the code to test the property secondaryAddress1
        expect(instance).to.have.property('secondaryAddress1');
        // expect(instance.secondaryAddress1).to.be(expectedValueLiteral);
      });

      it('should have the property secondaryAddress2 (base name: "secondaryAddress2")', function() {
        // TODO: update the code to test the property secondaryAddress2
        expect(instance).to.have.property('secondaryAddress2');
        // expect(instance.secondaryAddress2).to.be(expectedValueLiteral);
      });

      it('should have the property secondaryAddress3 (base name: "secondaryAddress3")', function() {
        // TODO: update the code to test the property secondaryAddress3
        expect(instance).to.have.property('secondaryAddress3');
        // expect(instance.secondaryAddress3).to.be(expectedValueLiteral);
      });

      it('should have the property secondaryAddress4 (base name: "secondaryAddress4")', function() {
        // TODO: update the code to test the property secondaryAddress4
        expect(instance).to.have.property('secondaryAddress4');
        // expect(instance.secondaryAddress4).to.be(expectedValueLiteral);
      });

      it('should have the property secondaryCity (base name: "secondaryCity")', function() {
        // TODO: update the code to test the property secondaryCity
        expect(instance).to.have.property('secondaryCity');
        // expect(instance.secondaryCity).to.be(expectedValueLiteral);
      });

      it('should have the property secondaryCounty (base name: "secondaryCounty")', function() {
        // TODO: update the code to test the property secondaryCounty
        expect(instance).to.have.property('secondaryCounty');
        // expect(instance.secondaryCounty).to.be(expectedValueLiteral);
      });

      it('should have the property secondaryZipCode (base name: "secondaryZipCode")', function() {
        // TODO: update the code to test the property secondaryZipCode
        expect(instance).to.have.property('secondaryZipCode');
        // expect(instance.secondaryZipCode).to.be(expectedValueLiteral);
      });

      it('should have the property secondaryCountryCode (base name: "secondaryCountryCode")', function() {
        // TODO: update the code to test the property secondaryCountryCode
        expect(instance).to.have.property('secondaryCountryCode');
        // expect(instance.secondaryCountryCode).to.be(expectedValueLiteral);
      });

      it('should have the property bin (base name: "bin")', function() {
        // TODO: update the code to test the property bin
        expect(instance).to.have.property('bin');
        // expect(instance.bin).to.be(expectedValueLiteral);
      });

      it('should have the property nationality (base name: "nationality")', function() {
        // TODO: update the code to test the property nationality
        expect(instance).to.have.property('nationality');
        // expect(instance.nationality).to.be(expectedValueLiteral);
      });

      it('should have the property countryOfIssuance (base name: "countryOfIssuance")', function() {
        // TODO: update the code to test the property countryOfIssuance
        expect(instance).to.have.property('countryOfIssuance');
        // expect(instance.countryOfIssuance).to.be(expectedValueLiteral);
      });

      it('should have the property documentNumber (base name: "documentNumber")', function() {
        // TODO: update the code to test the property documentNumber
        expect(instance).to.have.property('documentNumber');
        // expect(instance.documentNumber).to.be(expectedValueLiteral);
      });

      it('should have the property documentType (base name: "documentType")', function() {
        // TODO: update the code to test the property documentType
        expect(instance).to.have.property('documentType');
        // expect(instance.documentType).to.be(expectedValueLiteral);
      });

      it('should have the property documentExpiryDate (base name: "documentExpiryDate")', function() {
        // TODO: update the code to test the property documentExpiryDate
        expect(instance).to.have.property('documentExpiryDate');
        // expect(instance.documentExpiryDate).to.be(expectedValueLiteral);
      });

      it('should have the property gender (base name: "gender")', function() {
        // TODO: update the code to test the property gender
        expect(instance).to.have.property('gender');
        // expect(instance.gender).to.be(expectedValueLiteral);
      });

      it('should have the property userDefined (base name: "userDefined")', function() {
        // TODO: update the code to test the property userDefined
        expect(instance).to.have.property('userDefined');
        // expect(instance.userDefined).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property username (base name: "username")', function() {
        // TODO: update the code to test the property username
        expect(instance).to.have.property('username');
        // expect(instance.username).to.be(expectedValueLiteral);
      });

      it('should have the property password (base name: "password")', function() {
        // TODO: update the code to test the property password
        expect(instance).to.have.property('password');
        // expect(instance.password).to.be(expectedValueLiteral);
      });

      it('should have the property mobileNo (base name: "mobileNo")', function() {
        // TODO: update the code to test the property mobileNo
        expect(instance).to.have.property('mobileNo');
        // expect(instance.mobileNo).to.be(expectedValueLiteral);
      });

      it('should have the property walletName (base name: "walletName")', function() {
        // TODO: update the code to test the property walletName
        expect(instance).to.have.property('walletName');
        // expect(instance.walletName).to.be(expectedValueLiteral);
      });

      it('should have the property cardholderIdToLink (base name: "cardholderIdToLink")', function() {
        // TODO: update the code to test the property cardholderIdToLink
        expect(instance).to.have.property('cardholderIdToLink');
        // expect(instance.cardholderIdToLink).to.be(expectedValueLiteral);
      });

      it('should have the property useDefaultSpendWallet (base name: "useDefaultSpendWallet")', function() {
        // TODO: update the code to test the property useDefaultSpendWallet
        expect(instance).to.have.property('useDefaultSpendWallet');
        // expect(instance.useDefaultSpendWallet).to.be(expectedValueLiteral);
      });

      it('should have the property currencies (base name: "currencies")', function() {
        // TODO: update the code to test the property currencies
        expect(instance).to.have.property('currencies');
        // expect(instance.currencies).to.be(expectedValueLiteral);
      });

    });
  });

}));
