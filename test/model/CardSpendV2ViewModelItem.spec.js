/*
 * Finac API
 * <b>Version Notes:- <br/>• All amounts fields in requests and responses have been changed from decimal to int64(cents). This means that 10.00 in version 1, is 1000 in version 2.<br/>• ThreeDS endpoints have been added to this version. These will replace the KBA endpoints from version 1.</br>• AccountId endpoint has changed HTTP verb from GET to POST, furthermore additional cardholder details need to be provided as part of the HTTP body.</b>
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinacApi);
  }
}(this, function(expect, FinacApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CardSpendV2ViewModelItem', function() {
      beforeEach(function() {
        instance = new FinacApi.CardSpendV2ViewModelItem();
      });

      it('should create an instance of CardSpendV2ViewModelItem', function() {
        // TODO: update the code to test CardSpendV2ViewModelItem
        expect(instance).to.be.a(FinacApi.CardSpendV2ViewModelItem);
      });

      it('should have the property posDomestic (base name: "posDomestic")', function() {
        // TODO: update the code to test the property posDomestic
        expect(instance).to.have.property('posDomestic');
        // expect(instance.posDomestic).to.be(expectedValueLiteral);
      });

      it('should have the property posDomesticAuth (base name: "posDomesticAuth")', function() {
        // TODO: update the code to test the property posDomesticAuth
        expect(instance).to.have.property('posDomesticAuth');
        // expect(instance.posDomesticAuth).to.be(expectedValueLiteral);
      });

      it('should have the property posInternational (base name: "posInternational")', function() {
        // TODO: update the code to test the property posInternational
        expect(instance).to.have.property('posInternational');
        // expect(instance.posInternational).to.be(expectedValueLiteral);
      });

      it('should have the property posInternationalAuth (base name: "posInternationalAuth")', function() {
        // TODO: update the code to test the property posInternationalAuth
        expect(instance).to.have.property('posInternationalAuth');
        // expect(instance.posInternationalAuth).to.be(expectedValueLiteral);
      });

      it('should have the property motoApprovals (base name: "motoApprovals")', function() {
        // TODO: update the code to test the property motoApprovals
        expect(instance).to.have.property('motoApprovals');
        // expect(instance.motoApprovals).to.be(expectedValueLiteral);
      });

      it('should have the property atmDomestic (base name: "atmDomestic")', function() {
        // TODO: update the code to test the property atmDomestic
        expect(instance).to.have.property('atmDomestic');
        // expect(instance.atmDomestic).to.be(expectedValueLiteral);
      });

      it('should have the property atmDomesticAuth (base name: "atmDomesticAuth")', function() {
        // TODO: update the code to test the property atmDomesticAuth
        expect(instance).to.have.property('atmDomesticAuth');
        // expect(instance.atmDomesticAuth).to.be(expectedValueLiteral);
      });

      it('should have the property atmInternational (base name: "atmInternational")', function() {
        // TODO: update the code to test the property atmInternational
        expect(instance).to.have.property('atmInternational');
        // expect(instance.atmInternational).to.be(expectedValueLiteral);
      });

      it('should have the property atmInternationalAuth (base name: "atmInternationalAuth")', function() {
        // TODO: update the code to test the property atmInternationalAuth
        expect(instance).to.have.property('atmInternationalAuth');
        // expect(instance.atmInternationalAuth).to.be(expectedValueLiteral);
      });

      it('should have the property cashAdvanceDomestic (base name: "cashAdvanceDomestic")', function() {
        // TODO: update the code to test the property cashAdvanceDomestic
        expect(instance).to.have.property('cashAdvanceDomestic');
        // expect(instance.cashAdvanceDomestic).to.be(expectedValueLiteral);
      });

      it('should have the property cashAdvanceAuthDomestic (base name: "cashAdvanceAuthDomestic")', function() {
        // TODO: update the code to test the property cashAdvanceAuthDomestic
        expect(instance).to.have.property('cashAdvanceAuthDomestic');
        // expect(instance.cashAdvanceAuthDomestic).to.be(expectedValueLiteral);
      });

      it('should have the property cashAdvanceInt (base name: "cashAdvanceInt")', function() {
        // TODO: update the code to test the property cashAdvanceInt
        expect(instance).to.have.property('cashAdvanceInt');
        // expect(instance.cashAdvanceInt).to.be(expectedValueLiteral);
      });

      it('should have the property cashAdvanceAuthInt (base name: "cashAdvanceAuthInt")', function() {
        // TODO: update the code to test the property cashAdvanceAuthInt
        expect(instance).to.have.property('cashAdvanceAuthInt');
        // expect(instance.cashAdvanceAuthInt).to.be(expectedValueLiteral);
      });

    });
  });

}));
