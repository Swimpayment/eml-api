/*
 * Finac API
 * <b>Version Notes:- <br/>• All amounts fields in requests and responses have been changed from decimal to int64(cents). This means that 10.00 in version 1, is 1000 in version 2.<br/>• ThreeDS endpoints have been added to this version. These will replace the KBA endpoints from version 1.</br>• AccountId endpoint has changed HTTP verb from GET to POST, furthermore additional cardholder details need to be provided as part of the HTTP body.</b>
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinacApi);
  }
}(this, function(expect, FinacApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DirectDebitReturnTransactionViewModelV2', function() {
      beforeEach(function() {
        instance = new FinacApi.DirectDebitReturnTransactionViewModelV2();
      });

      it('should create an instance of DirectDebitReturnTransactionViewModelV2', function() {
        // TODO: update the code to test DirectDebitReturnTransactionViewModelV2
        expect(instance).to.be.a(FinacApi.DirectDebitReturnTransactionViewModelV2);
      });

      it('should have the property directDebitId (base name: "directDebitId")', function() {
        // TODO: update the code to test the property directDebitId
        expect(instance).to.have.property('directDebitId');
        // expect(instance.directDebitId).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property originalMessageId (base name: "originalMessageId")', function() {
        // TODO: update the code to test the property originalMessageId
        expect(instance).to.have.property('originalMessageId');
        // expect(instance.originalMessageId).to.be(expectedValueLiteral);
      });

      it('should have the property originalMessageType (base name: "originalMessageType")', function() {
        // TODO: update the code to test the property originalMessageType
        expect(instance).to.have.property('originalMessageType');
        // expect(instance.originalMessageType).to.be(expectedValueLiteral);
      });

      it('should have the property originalEndToEndId (base name: "originalEndToEndId")', function() {
        // TODO: update the code to test the property originalEndToEndId
        expect(instance).to.have.property('originalEndToEndId');
        // expect(instance.originalEndToEndId).to.be(expectedValueLiteral);
      });

      it('should have the property originalInstructionId (base name: "originalInstructionId")', function() {
        // TODO: update the code to test the property originalInstructionId
        expect(instance).to.have.property('originalInstructionId');
        // expect(instance.originalInstructionId).to.be(expectedValueLiteral);
      });

      it('should have the property originalTransactionId (base name: "originalTransactionId")', function() {
        // TODO: update the code to test the property originalTransactionId
        expect(instance).to.have.property('originalTransactionId');
        // expect(instance.originalTransactionId).to.be(expectedValueLiteral);
      });

      it('should have the property requiredCollectionDate (base name: "requiredCollectionDate")', function() {
        // TODO: update the code to test the property requiredCollectionDate
        expect(instance).to.have.property('requiredCollectionDate');
        // expect(instance.requiredCollectionDate).to.be(expectedValueLiteral);
      });

      it('should have the property reason (base name: "reason")', function() {
        // TODO: update the code to test the property reason
        expect(instance).to.have.property('reason');
        // expect(instance.reason).to.be(expectedValueLiteral);
      });

      it('should have the property mandateId (base name: "mandateId")', function() {
        // TODO: update the code to test the property mandateId
        expect(instance).to.have.property('mandateId');
        // expect(instance.mandateId).to.be(expectedValueLiteral);
      });

      it('should have the property mandate (base name: "mandate")', function() {
        // TODO: update the code to test the property mandate
        expect(instance).to.have.property('mandate');
        // expect(instance.mandate).to.be(expectedValueLiteral);
      });

      it('should have the property debtorBic (base name: "debtorBic")', function() {
        // TODO: update the code to test the property debtorBic
        expect(instance).to.have.property('debtorBic');
        // expect(instance.debtorBic).to.be(expectedValueLiteral);
      });

      it('should have the property debtorIban (base name: "debtorIban")', function() {
        // TODO: update the code to test the property debtorIban
        expect(instance).to.have.property('debtorIban');
        // expect(instance.debtorIban).to.be(expectedValueLiteral);
      });

      it('should have the property debtorFullName (base name: "debtorFullName")', function() {
        // TODO: update the code to test the property debtorFullName
        expect(instance).to.have.property('debtorFullName');
        // expect(instance.debtorFullName).to.be(expectedValueLiteral);
      });

      it('should have the property creditorBic (base name: "creditorBic")', function() {
        // TODO: update the code to test the property creditorBic
        expect(instance).to.have.property('creditorBic');
        // expect(instance.creditorBic).to.be(expectedValueLiteral);
      });

      it('should have the property creditorIban (base name: "creditorIban")', function() {
        // TODO: update the code to test the property creditorIban
        expect(instance).to.have.property('creditorIban');
        // expect(instance.creditorIban).to.be(expectedValueLiteral);
      });

      it('should have the property creditorFullName (base name: "creditorFullName")', function() {
        // TODO: update the code to test the property creditorFullName
        expect(instance).to.have.property('creditorFullName');
        // expect(instance.creditorFullName).to.be(expectedValueLiteral);
      });

      it('should have the property reference (base name: "reference")', function() {
        // TODO: update the code to test the property reference
        expect(instance).to.have.property('reference');
        // expect(instance.reference).to.be(expectedValueLiteral);
      });

      it('should have the property incomingOutgoing (base name: "incomingOutgoing")', function() {
        // TODO: update the code to test the property incomingOutgoing
        expect(instance).to.have.property('incomingOutgoing');
        // expect(instance.incomingOutgoing).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property statusValue (base name: "statusValue")', function() {
        // TODO: update the code to test the property statusValue
        expect(instance).to.have.property('statusValue');
        // expect(instance.statusValue).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

    });
  });

}));
