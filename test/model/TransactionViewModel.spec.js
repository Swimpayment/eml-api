/*
 * Finac API
 * <b>Version Notes:- <br/>• All amounts fields in requests and responses have been changed from decimal to int64(cents). This means that 10.00 in version 1, is 1000 in version 2.<br/>• ThreeDS endpoints have been added to this version. These will replace the KBA endpoints from version 1.</br>• AccountId endpoint has changed HTTP verb from GET to POST, furthermore additional cardholder details need to be provided as part of the HTTP body.</b>
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinacApi);
  }
}(this, function(expect, FinacApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TransactionViewModel', function() {
      beforeEach(function() {
        instance = new FinacApi.TransactionViewModel();
      });

      it('should create an instance of TransactionViewModel', function() {
        // TODO: update the code to test TransactionViewModel
        expect(instance).to.be.a(FinacApi.TransactionViewModel);
      });

      it('should have the property _date (base name: "date")', function() {
        // TODO: update the code to test the property _date
        expect(instance).to.have.property('_date');
        // expect(instance._date).to.be(expectedValueLiteral);
      });

      it('should have the property transactionType (base name: "transactionType")', function() {
        // TODO: update the code to test the property transactionType
        expect(instance).to.have.property('transactionType');
        // expect(instance.transactionType).to.be(expectedValueLiteral);
      });

      it('should have the property cardType (base name: "cardType")', function() {
        // TODO: update the code to test the property cardType
        expect(instance).to.have.property('cardType');
        // expect(instance.cardType).to.be(expectedValueLiteral);
      });

      it('should have the property mti (base name: "mti")', function() {
        // TODO: update the code to test the property mti
        expect(instance).to.have.property('mti');
        // expect(instance.mti).to.be(expectedValueLiteral);
      });

      it('should have the property arn (base name: "arn")', function() {
        // TODO: update the code to test the property arn
        expect(instance).to.have.property('arn');
        // expect(instance.arn).to.be(expectedValueLiteral);
      });

      it('should have the property stn (base name: "stn")', function() {
        // TODO: update the code to test the property stn
        expect(instance).to.have.property('stn');
        // expect(instance.stn).to.be(expectedValueLiteral);
      });

      it('should have the property authenticationNumber (base name: "authenticationNumber")', function() {
        // TODO: update the code to test the property authenticationNumber
        expect(instance).to.have.property('authenticationNumber');
        // expect(instance.authenticationNumber).to.be(expectedValueLiteral);
      });

      it('should have the property recordType (base name: "recordType")', function() {
        // TODO: update the code to test the property recordType
        expect(instance).to.have.property('recordType');
        // expect(instance.recordType).to.be(expectedValueLiteral);
      });

      it('should have the property transactionOrigin (base name: "transactionOrigin")', function() {
        // TODO: update the code to test the property transactionOrigin
        expect(instance).to.have.property('transactionOrigin');
        // expect(instance.transactionOrigin).to.be(expectedValueLiteral);
      });

      it('should have the property transactionDescription (base name: "transactionDescription")', function() {
        // TODO: update the code to test the property transactionDescription
        expect(instance).to.have.property('transactionDescription');
        // expect(instance.transactionDescription).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property fee (base name: "fee")', function() {
        // TODO: update the code to test the property fee
        expect(instance).to.have.property('fee');
        // expect(instance.fee).to.be(expectedValueLiteral);
      });

      it('should have the property availableBalance (base name: "availableBalance")', function() {
        // TODO: update the code to test the property availableBalance
        expect(instance).to.have.property('availableBalance');
        // expect(instance.availableBalance).to.be(expectedValueLiteral);
      });

      it('should have the property ledgerBalance (base name: "ledgerBalance")', function() {
        // TODO: update the code to test the property ledgerBalance
        expect(instance).to.have.property('ledgerBalance');
        // expect(instance.ledgerBalance).to.be(expectedValueLiteral);
      });

      it('should have the property clientId (base name: "clientId")', function() {
        // TODO: update the code to test the property clientId
        expect(instance).to.have.property('clientId');
        // expect(instance.clientId).to.be(expectedValueLiteral);
      });

      it('should have the property terminalID (base name: "terminalID")', function() {
        // TODO: update the code to test the property terminalID
        expect(instance).to.have.property('terminalID');
        // expect(instance.terminalID).to.be(expectedValueLiteral);
      });

      it('should have the property terminalLocation (base name: "terminalLocation")', function() {
        // TODO: update the code to test the property terminalLocation
        expect(instance).to.have.property('terminalLocation');
        // expect(instance.terminalLocation).to.be(expectedValueLiteral);
      });

      it('should have the property terminalOwner (base name: "terminalOwner")', function() {
        // TODO: update the code to test the property terminalOwner
        expect(instance).to.have.property('terminalOwner');
        // expect(instance.terminalOwner).to.be(expectedValueLiteral);
      });

      it('should have the property terminalCity (base name: "terminalCity")', function() {
        // TODO: update the code to test the property terminalCity
        expect(instance).to.have.property('terminalCity');
        // expect(instance.terminalCity).to.be(expectedValueLiteral);
      });

      it('should have the property terminalState (base name: "terminalState")', function() {
        // TODO: update the code to test the property terminalState
        expect(instance).to.have.property('terminalState');
        // expect(instance.terminalState).to.be(expectedValueLiteral);
      });

      it('should have the property terminalCountry (base name: "terminalCountry")', function() {
        // TODO: update the code to test the property terminalCountry
        expect(instance).to.have.property('terminalCountry');
        // expect(instance.terminalCountry).to.be(expectedValueLiteral);
      });

      it('should have the property terminalCurrency (base name: "terminalCurrency")', function() {
        // TODO: update the code to test the property terminalCurrency
        expect(instance).to.have.property('terminalCurrency');
        // expect(instance.terminalCurrency).to.be(expectedValueLiteral);
      });

      it('should have the property mcc (base name: "mcc")', function() {
        // TODO: update the code to test the property mcc
        expect(instance).to.have.property('mcc');
        // expect(instance.mcc).to.be(expectedValueLiteral);
      });

      it('should have the property surcharge (base name: "surcharge")', function() {
        // TODO: update the code to test the property surcharge
        expect(instance).to.have.property('surcharge');
        // expect(instance.surcharge).to.be(expectedValueLiteral);
      });

      it('should have the property issuerFee (base name: "issuerFee")', function() {
        // TODO: update the code to test the property issuerFee
        expect(instance).to.have.property('issuerFee');
        // expect(instance.issuerFee).to.be(expectedValueLiteral);
      });

      it('should have the property responseCode (base name: "responseCode")', function() {
        // TODO: update the code to test the property responseCode
        expect(instance).to.have.property('responseCode');
        // expect(instance.responseCode).to.be(expectedValueLiteral);
      });

      it('should have the property foreignExchangeFee (base name: "foreignExchangeFee")', function() {
        // TODO: update the code to test the property foreignExchangeFee
        expect(instance).to.have.property('foreignExchangeFee');
        // expect(instance.foreignExchangeFee).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property transactionCodeDescription (base name: "transactionCodeDescription")', function() {
        // TODO: update the code to test the property transactionCodeDescription
        expect(instance).to.have.property('transactionCodeDescription');
        // expect(instance.transactionCodeDescription).to.be(expectedValueLiteral);
      });

      it('should have the property transactionResult (base name: "transactionResult")', function() {
        // TODO: update the code to test the property transactionResult
        expect(instance).to.have.property('transactionResult');
        // expect(instance.transactionResult).to.be(expectedValueLiteral);
      });

      it('should have the property originalTransactionAmount (base name: "originalTransactionAmount")', function() {
        // TODO: update the code to test the property originalTransactionAmount
        expect(instance).to.have.property('originalTransactionAmount');
        // expect(instance.originalTransactionAmount).to.be(expectedValueLiteral);
      });

      it('should have the property conversionRate (base name: "conversionRate")', function() {
        // TODO: update the code to test the property conversionRate
        expect(instance).to.have.property('conversionRate');
        // expect(instance.conversionRate).to.be(expectedValueLiteral);
      });

      it('should have the property originalHoldAmount (base name: "originalHoldAmount")', function() {
        // TODO: update the code to test the property originalHoldAmount
        expect(instance).to.have.property('originalHoldAmount');
        // expect(instance.originalHoldAmount).to.be(expectedValueLiteral);
      });

      it('should have the property cardAcceptorIdCode (base name: "cardAcceptorIdCode")', function() {
        // TODO: update the code to test the property cardAcceptorIdCode
        expect(instance).to.have.property('cardAcceptorIdCode');
        // expect(instance.cardAcceptorIdCode).to.be(expectedValueLiteral);
      });

      it('should have the property actionCodeDescription (base name: "actionCodeDescription")', function() {
        // TODO: update the code to test the property actionCodeDescription
        expect(instance).to.have.property('actionCodeDescription');
        // expect(instance.actionCodeDescription).to.be(expectedValueLiteral);
      });

      it('should have the property acquiringInstitution (base name: "acquiringInstitution")', function() {
        // TODO: update the code to test the property acquiringInstitution
        expect(instance).to.have.property('acquiringInstitution');
        // expect(instance.acquiringInstitution).to.be(expectedValueLiteral);
      });

      it('should have the property processor (base name: "processor")', function() {
        // TODO: update the code to test the property processor
        expect(instance).to.have.property('processor');
        // expect(instance.processor).to.be(expectedValueLiteral);
      });

      it('should have the property posEntryMode (base name: "posEntryMode")', function() {
        // TODO: update the code to test the property posEntryMode
        expect(instance).to.have.property('posEntryMode');
        // expect(instance.posEntryMode).to.be(expectedValueLiteral);
      });

      it('should have the property atmFee (base name: "atmFee")', function() {
        // TODO: update the code to test the property atmFee
        expect(instance).to.have.property('atmFee');
        // expect(instance.atmFee).to.be(expectedValueLiteral);
      });

      it('should have the property walletProvider (base name: "walletProvider")', function() {
        // TODO: update the code to test the property walletProvider
        expect(instance).to.have.property('walletProvider');
        // expect(instance.walletProvider).to.be(expectedValueLiteral);
      });

      it('should have the property cardId (base name: "cardId")', function() {
        // TODO: update the code to test the property cardId
        expect(instance).to.have.property('cardId');
        // expect(instance.cardId).to.be(expectedValueLiteral);
      });

      it('should have the property walletId (base name: "walletId")', function() {
        // TODO: update the code to test the property walletId
        expect(instance).to.have.property('walletId');
        // expect(instance.walletId).to.be(expectedValueLiteral);
      });

      it('should have the property uniqueReference (base name: "uniqueReference")', function() {
        // TODO: update the code to test the property uniqueReference
        expect(instance).to.have.property('uniqueReference');
        // expect(instance.uniqueReference).to.be(expectedValueLiteral);
      });

    });
  });

}));
