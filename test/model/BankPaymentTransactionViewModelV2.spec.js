/*
 * Finac API
 * <b>Version Notes:- <br/>• All amounts fields in requests and responses have been changed from decimal to int64(cents). This means that 10.00 in version 1, is 1000 in version 2.<br/>• ThreeDS endpoints have been added to this version. These will replace the KBA endpoints from version 1.</br>• AccountId endpoint has changed HTTP verb from GET to POST, furthermore additional cardholder details need to be provided as part of the HTTP body.</b>
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinacApi);
  }
}(this, function(expect, FinacApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('BankPaymentTransactionViewModelV2', function() {
      beforeEach(function() {
        instance = new FinacApi.BankPaymentTransactionViewModelV2();
      });

      it('should create an instance of BankPaymentTransactionViewModelV2', function() {
        // TODO: update the code to test BankPaymentTransactionViewModelV2
        expect(instance).to.be.a(FinacApi.BankPaymentTransactionViewModelV2);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property transactionId (base name: "transactionId")', function() {
        // TODO: update the code to test the property transactionId
        expect(instance).to.have.property('transactionId');
        // expect(instance.transactionId).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property cardholderID (base name: "cardholderID")', function() {
        // TODO: update the code to test the property cardholderID
        expect(instance).to.have.property('cardholderID');
        // expect(instance.cardholderID).to.be(expectedValueLiteral);
      });

      it('should have the property debtorBankIndentifier (base name: "debtorBankIndentifier")', function() {
        // TODO: update the code to test the property debtorBankIndentifier
        expect(instance).to.have.property('debtorBankIndentifier');
        // expect(instance.debtorBankIndentifier).to.be(expectedValueLiteral);
      });

      it('should have the property debtorAccountIdentifier (base name: "debtorAccountIdentifier")', function() {
        // TODO: update the code to test the property debtorAccountIdentifier
        expect(instance).to.have.property('debtorAccountIdentifier');
        // expect(instance.debtorAccountIdentifier).to.be(expectedValueLiteral);
      });

      it('should have the property debtorFullName (base name: "debtorFullName")', function() {
        // TODO: update the code to test the property debtorFullName
        expect(instance).to.have.property('debtorFullName');
        // expect(instance.debtorFullName).to.be(expectedValueLiteral);
      });

      it('should have the property debtorFullAddress (base name: "debtorFullAddress")', function() {
        // TODO: update the code to test the property debtorFullAddress
        expect(instance).to.have.property('debtorFullAddress');
        // expect(instance.debtorFullAddress).to.be(expectedValueLiteral);
      });

      it('should have the property debtorCountryCode (base name: "debtorCountryCode")', function() {
        // TODO: update the code to test the property debtorCountryCode
        expect(instance).to.have.property('debtorCountryCode');
        // expect(instance.debtorCountryCode).to.be(expectedValueLiteral);
      });

      it('should have the property creditorBankIdentifier (base name: "creditorBankIdentifier")', function() {
        // TODO: update the code to test the property creditorBankIdentifier
        expect(instance).to.have.property('creditorBankIdentifier');
        // expect(instance.creditorBankIdentifier).to.be(expectedValueLiteral);
      });

      it('should have the property creditorAccountIdentifier (base name: "creditorAccountIdentifier")', function() {
        // TODO: update the code to test the property creditorAccountIdentifier
        expect(instance).to.have.property('creditorAccountIdentifier');
        // expect(instance.creditorAccountIdentifier).to.be(expectedValueLiteral);
      });

      it('should have the property creditorFullName (base name: "creditorFullName")', function() {
        // TODO: update the code to test the property creditorFullName
        expect(instance).to.have.property('creditorFullName');
        // expect(instance.creditorFullName).to.be(expectedValueLiteral);
      });

      it('should have the property creditorFullAddress (base name: "creditorFullAddress")', function() {
        // TODO: update the code to test the property creditorFullAddress
        expect(instance).to.have.property('creditorFullAddress');
        // expect(instance.creditorFullAddress).to.be(expectedValueLiteral);
      });

      it('should have the property creditorCountryCode (base name: "creditorCountryCode")', function() {
        // TODO: update the code to test the property creditorCountryCode
        expect(instance).to.have.property('creditorCountryCode');
        // expect(instance.creditorCountryCode).to.be(expectedValueLiteral);
      });

      it('should have the property reference (base name: "reference")', function() {
        // TODO: update the code to test the property reference
        expect(instance).to.have.property('reference');
        // expect(instance.reference).to.be(expectedValueLiteral);
      });

      it('should have the property dateTimeEntered (base name: "dateTimeEntered")', function() {
        // TODO: update the code to test the property dateTimeEntered
        expect(instance).to.have.property('dateTimeEntered');
        // expect(instance.dateTimeEntered).to.be(expectedValueLiteral);
      });

      it('should have the property inwardOutward (base name: "inwardOutward")', function() {
        // TODO: update the code to test the property inwardOutward
        expect(instance).to.have.property('inwardOutward');
        // expect(instance.inwardOutward).to.be(expectedValueLiteral);
      });

      it('should have the property processorType (base name: "processorType")', function() {
        // TODO: update the code to test the property processorType
        expect(instance).to.have.property('processorType');
        // expect(instance.processorType).to.be(expectedValueLiteral);
      });

      it('should have the property paymentStatus (base name: "paymentStatus")', function() {
        // TODO: update the code to test the property paymentStatus
        expect(instance).to.have.property('paymentStatus');
        // expect(instance.paymentStatus).to.be(expectedValueLiteral);
      });

      it('should have the property userDefinedFields (base name: "userDefinedFields")', function() {
        // TODO: update the code to test the property userDefinedFields
        expect(instance).to.have.property('userDefinedFields');
        // expect(instance.userDefinedFields).to.be(expectedValueLiteral);
      });

    });
  });

}));
