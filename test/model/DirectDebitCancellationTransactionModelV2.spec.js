/*
 * Finac API
 * <b>Version Notes:- <br/>• All amounts fields in requests and responses have been changed from decimal to int64(cents). This means that 10.00 in version 1, is 1000 in version 2.<br/>• ThreeDS endpoints have been added to this version. These will replace the KBA endpoints from version 1.</br>• AccountId endpoint has changed HTTP verb from GET to POST, furthermore additional cardholder details need to be provided as part of the HTTP body.</b>
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinacApi);
  }
}(this, function(expect, FinacApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DirectDebitCancellationTransactionModelV2', function() {
      beforeEach(function() {
        instance = new FinacApi.DirectDebitCancellationTransactionModelV2();
      });

      it('should create an instance of DirectDebitCancellationTransactionModelV2', function() {
        // TODO: update the code to test DirectDebitCancellationTransactionModelV2
        expect(instance).to.be.a(FinacApi.DirectDebitCancellationTransactionModelV2);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property orgnlMsgID (base name: "orgnlMsgID")', function() {
        // TODO: update the code to test the property orgnlMsgID
        expect(instance).to.have.property('orgnlMsgID');
        // expect(instance.orgnlMsgID).to.be(expectedValueLiteral);
      });

      it('should have the property orgnlMsgType (base name: "orgnlMsgType")', function() {
        // TODO: update the code to test the property orgnlMsgType
        expect(instance).to.have.property('orgnlMsgType');
        // expect(instance.orgnlMsgType).to.be(expectedValueLiteral);
      });

      it('should have the property orgnlEndtoEndID (base name: "orgnlEndtoEndID")', function() {
        // TODO: update the code to test the property orgnlEndtoEndID
        expect(instance).to.have.property('orgnlEndtoEndID');
        // expect(instance.orgnlEndtoEndID).to.be(expectedValueLiteral);
      });

      it('should have the property orgnlTxID (base name: "orgnlTxID")', function() {
        // TODO: update the code to test the property orgnlTxID
        expect(instance).to.have.property('orgnlTxID');
        // expect(instance.orgnlTxID).to.be(expectedValueLiteral);
      });

      it('should have the property orgnlBnkSttlmAmt (base name: "orgnlBnkSttlmAmt")', function() {
        // TODO: update the code to test the property orgnlBnkSttlmAmt
        expect(instance).to.have.property('orgnlBnkSttlmAmt');
        // expect(instance.orgnlBnkSttlmAmt).to.be(expectedValueLiteral);
      });

      it('should have the property orgnlBnkSttlmDt (base name: "orgnlBnkSttlmDt")', function() {
        // TODO: update the code to test the property orgnlBnkSttlmDt
        expect(instance).to.have.property('orgnlBnkSttlmDt');
        // expect(instance.orgnlBnkSttlmDt).to.be(expectedValueLiteral);
      });

      it('should have the property reason (base name: "reason")', function() {
        // TODO: update the code to test the property reason
        expect(instance).to.have.property('reason');
        // expect(instance.reason).to.be(expectedValueLiteral);
      });

      it('should have the property mandateID (base name: "mandateID")', function() {
        // TODO: update the code to test the property mandateID
        expect(instance).to.have.property('mandateID');
        // expect(instance.mandateID).to.be(expectedValueLiteral);
      });

      it('should have the property dateOfSngtr (base name: "dateOfSngtr")', function() {
        // TODO: update the code to test the property dateOfSngtr
        expect(instance).to.have.property('dateOfSngtr');
        // expect(instance.dateOfSngtr).to.be(expectedValueLiteral);
      });

      it('should have the property debtorBic (base name: "debtorBic")', function() {
        // TODO: update the code to test the property debtorBic
        expect(instance).to.have.property('debtorBic');
        // expect(instance.debtorBic).to.be(expectedValueLiteral);
      });

      it('should have the property debtorIban (base name: "debtorIban")', function() {
        // TODO: update the code to test the property debtorIban
        expect(instance).to.have.property('debtorIban');
        // expect(instance.debtorIban).to.be(expectedValueLiteral);
      });

      it('should have the property debtorName (base name: "debtorName")', function() {
        // TODO: update the code to test the property debtorName
        expect(instance).to.have.property('debtorName');
        // expect(instance.debtorName).to.be(expectedValueLiteral);
      });

      it('should have the property creditorBic (base name: "creditorBic")', function() {
        // TODO: update the code to test the property creditorBic
        expect(instance).to.have.property('creditorBic');
        // expect(instance.creditorBic).to.be(expectedValueLiteral);
      });

      it('should have the property creditorIban (base name: "creditorIban")', function() {
        // TODO: update the code to test the property creditorIban
        expect(instance).to.have.property('creditorIban');
        // expect(instance.creditorIban).to.be(expectedValueLiteral);
      });

      it('should have the property creditorName (base name: "creditorName")', function() {
        // TODO: update the code to test the property creditorName
        expect(instance).to.have.property('creditorName');
        // expect(instance.creditorName).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property incomingOutgoing (base name: "incomingOutgoing")', function() {
        // TODO: update the code to test the property incomingOutgoing
        expect(instance).to.have.property('incomingOutgoing');
        // expect(instance.incomingOutgoing).to.be(expectedValueLiteral);
      });

    });
  });

}));
