/*
 * Finac API
 * <b>Version Notes:- <br/>• All amounts fields in requests and responses have been changed from decimal to int64(cents). This means that 10.00 in version 1, is 1000 in version 2.<br/>• ThreeDS endpoints have been added to this version. These will replace the KBA endpoints from version 1.</br>• AccountId endpoint has changed HTTP verb from GET to POST, furthermore additional cardholder details need to be provided as part of the HTTP body.</b>
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinacApi);
  }
}(this, function(expect, FinacApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('AccountLoadV2VM', function() {
      beforeEach(function() {
        instance = new FinacApi.AccountLoadV2VM();
      });

      it('should create an instance of AccountLoadV2VM', function() {
        // TODO: update the code to test AccountLoadV2VM
        expect(instance).to.be.a(FinacApi.AccountLoadV2VM);
      });

      it('should have the property internetDebitCredit (base name: "internetDebitCredit")', function() {
        // TODO: update the code to test the property internetDebitCredit
        expect(instance).to.have.property('internetDebitCredit');
        // expect(instance.internetDebitCredit).to.be(expectedValueLiteral);
      });

      it('should have the property acpLoad (base name: "acpLoad")', function() {
        // TODO: update the code to test the property acpLoad
        expect(instance).to.have.property('acpLoad');
        // expect(instance.acpLoad).to.be(expectedValueLiteral);
      });

      it('should have the property batchLoad (base name: "batchLoad")', function() {
        // TODO: update the code to test the property batchLoad
        expect(instance).to.have.property('batchLoad');
        // expect(instance.batchLoad).to.be(expectedValueLiteral);
      });

      it('should have the property smsLoad (base name: "smsLoad")', function() {
        // TODO: update the code to test the property smsLoad
        expect(instance).to.have.property('smsLoad');
        // expect(instance.smsLoad).to.be(expectedValueLiteral);
      });

      it('should have the property starterPackLoad (base name: "starterPackLoad")', function() {
        // TODO: update the code to test the property starterPackLoad
        expect(instance).to.have.property('starterPackLoad');
        // expect(instance.starterPackLoad).to.be(expectedValueLiteral);
      });

      it('should have the property terminalLoad (base name: "terminalLoad")', function() {
        // TODO: update the code to test the property terminalLoad
        expect(instance).to.have.property('terminalLoad');
        // expect(instance.terminalLoad).to.be(expectedValueLiteral);
      });

      it('should have the property chargeBackCredit (base name: "chargeBackCredit")', function() {
        // TODO: update the code to test the property chargeBackCredit
        expect(instance).to.have.property('chargeBackCredit');
        // expect(instance.chargeBackCredit).to.be(expectedValueLiteral);
      });

      it('should have the property representmentCredit (base name: "representmentCredit")', function() {
        // TODO: update the code to test the property representmentCredit
        expect(instance).to.have.property('representmentCredit');
        // expect(instance.representmentCredit).to.be(expectedValueLiteral);
      });

      it('should have the property expiredCardLoad (base name: "expiredCardLoad")', function() {
        // TODO: update the code to test the property expiredCardLoad
        expect(instance).to.have.property('expiredCardLoad');
        // expect(instance.expiredCardLoad).to.be(expectedValueLiteral);
      });

      it('should have the property depositToCardAPI (base name: "depositToCardAPI")', function() {
        // TODO: update the code to test the property depositToCardAPI
        expect(instance).to.have.property('depositToCardAPI');
        // expect(instance.depositToCardAPI).to.be(expectedValueLiteral);
      });

      it('should have the property moneySendFunding (base name: "moneySendFunding")', function() {
        // TODO: update the code to test the property moneySendFunding
        expect(instance).to.have.property('moneySendFunding');
        // expect(instance.moneySendFunding).to.be(expectedValueLiteral);
      });

      it('should have the property moneySendInterCountry (base name: "moneySendInterCountry")', function() {
        // TODO: update the code to test the property moneySendInterCountry
        expect(instance).to.have.property('moneySendInterCountry');
        // expect(instance.moneySendInterCountry).to.be(expectedValueLiteral);
      });

      it('should have the property moneySendIntraCountry (base name: "moneySendIntraCountry")', function() {
        // TODO: update the code to test the property moneySendIntraCountry
        expect(instance).to.have.property('moneySendIntraCountry');
        // expect(instance.moneySendIntraCountry).to.be(expectedValueLiteral);
      });

      it('should have the property sepaCredit (base name: "sepaCredit")', function() {
        // TODO: update the code to test the property sepaCredit
        expect(instance).to.have.property('sepaCredit');
        // expect(instance.sepaCredit).to.be(expectedValueLiteral);
      });

      it('should have the property sepaOutgoingPayment (base name: "sepaOutgoingPayment")', function() {
        // TODO: update the code to test the property sepaOutgoingPayment
        expect(instance).to.have.property('sepaOutgoingPayment');
        // expect(instance.sepaOutgoingPayment).to.be(expectedValueLiteral);
      });

      it('should have the property cardLoadAtPayzone (base name: "cardLoadAtPayzone")', function() {
        // TODO: update the code to test the property cardLoadAtPayzone
        expect(instance).to.have.property('cardLoadAtPayzone');
        // expect(instance.cardLoadAtPayzone).to.be(expectedValueLiteral);
      });

      it('should have the property postOfficeLoad (base name: "postOfficeLoad")', function() {
        // TODO: update the code to test the property postOfficeLoad
        expect(instance).to.have.property('postOfficeLoad');
        // expect(instance.postOfficeLoad).to.be(expectedValueLiteral);
      });

      it('should have the property initialLoadToSecondary (base name: "initialLoadToSecondary")', function() {
        // TODO: update the code to test the property initialLoadToSecondary
        expect(instance).to.have.property('initialLoadToSecondary');
        // expect(instance.initialLoadToSecondary).to.be(expectedValueLiteral);
      });

      it('should have the property totalLoad (base name: "totalLoad")', function() {
        // TODO: update the code to test the property totalLoad
        expect(instance).to.have.property('totalLoad');
        // expect(instance.totalLoad).to.be(expectedValueLiteral);
      });

      it('should have the property ukashLoad (base name: "ukashLoad")', function() {
        // TODO: update the code to test the property ukashLoad
        expect(instance).to.have.property('ukashLoad');
        // expect(instance.ukashLoad).to.be(expectedValueLiteral);
      });

      it('should have the property iDealLoad (base name: "iDealLoad")', function() {
        // TODO: update the code to test the property iDealLoad
        expect(instance).to.have.property('iDealLoad');
        // expect(instance.iDealLoad).to.be(expectedValueLiteral);
      });

      it('should have the property neocashLoad (base name: "neocashLoad")', function() {
        // TODO: update the code to test the property neocashLoad
        expect(instance).to.have.property('neocashLoad');
        // expect(instance.neocashLoad).to.be(expectedValueLiteral);
      });

      it('should have the property paytrailLoad (base name: "paytrailLoad")', function() {
        // TODO: update the code to test the property paytrailLoad
        expect(instance).to.have.property('paytrailLoad');
        // expect(instance.paytrailLoad).to.be(expectedValueLiteral);
      });

      it('should have the property veritasLoad (base name: "veritasLoad")', function() {
        // TODO: update the code to test the property veritasLoad
        expect(instance).to.have.property('veritasLoad');
        // expect(instance.veritasLoad).to.be(expectedValueLiteral);
      });

      it('should have the property sofortLoad (base name: "sofortLoad")', function() {
        // TODO: update the code to test the property sofortLoad
        expect(instance).to.have.property('sofortLoad');
        // expect(instance.sofortLoad).to.be(expectedValueLiteral);
      });

      it('should have the property tradeWalletToCardLoad (base name: "tradeWalletToCardLoad")', function() {
        // TODO: update the code to test the property tradeWalletToCardLoad
        expect(instance).to.have.property('tradeWalletToCardLoad');
        // expect(instance.tradeWalletToCardLoad).to.be(expectedValueLiteral);
      });

      it('should have the property bankTransferLoad (base name: "bankTransferLoad")', function() {
        // TODO: update the code to test the property bankTransferLoad
        expect(instance).to.have.property('bankTransferLoad');
        // expect(instance.bankTransferLoad).to.be(expectedValueLiteral);
      });

      it('should have the property cardToCardFX (base name: "cardToCardFX")', function() {
        // TODO: update the code to test the property cardToCardFX
        expect(instance).to.have.property('cardToCardFX');
        // expect(instance.cardToCardFX).to.be(expectedValueLiteral);
      });

      it('should have the property secondaryCardLoad (base name: "secondaryCardLoad")', function() {
        // TODO: update the code to test the property secondaryCardLoad
        expect(instance).to.have.property('secondaryCardLoad');
        // expect(instance.secondaryCardLoad).to.be(expectedValueLiteral);
      });

      it('should have the property loadAtOMV (base name: "loadAtOMV")', function() {
        // TODO: update the code to test the property loadAtOMV
        expect(instance).to.have.property('loadAtOMV');
        // expect(instance.loadAtOMV).to.be(expectedValueLiteral);
      });

      it('should have the property verificationLoad (base name: "verificationLoad")', function() {
        // TODO: update the code to test the property verificationLoad
        expect(instance).to.have.property('verificationLoad');
        // expect(instance.verificationLoad).to.be(expectedValueLiteral);
      });

      it('should have the property referralReward (base name: "referralReward")', function() {
        // TODO: update the code to test the property referralReward
        expect(instance).to.have.property('referralReward');
        // expect(instance.referralReward).to.be(expectedValueLiteral);
      });

    });
  });

}));
