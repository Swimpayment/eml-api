/*
 * Finac API
 * <b>Version Notes:- <br/>• All amounts fields in requests and responses have been changed from decimal to int64(cents). This means that 10.00 in version 1, is 1000 in version 2.<br/>• ThreeDS endpoints have been added to this version. These will replace the KBA endpoints from version 1.</br>• AccountId endpoint has changed HTTP verb from GET to POST, furthermore additional cardholder details need to be provided as part of the HTTP body.</b>
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinacApi);
  }
}(this, function(expect, FinacApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('MandateVM', function() {
      beforeEach(function() {
        instance = new FinacApi.MandateVM();
      });

      it('should create an instance of MandateVM', function() {
        // TODO: update the code to test MandateVM
        expect(instance).to.be.a(FinacApi.MandateVM);
      });

      it('should have the property mandateId (base name: "mandateId")', function() {
        // TODO: update the code to test the property mandateId
        expect(instance).to.have.property('mandateId');
        // expect(instance.mandateId).to.be(expectedValueLiteral);
      });

      it('should have the property merchantName (base name: "merchantName")', function() {
        // TODO: update the code to test the property merchantName
        expect(instance).to.have.property('merchantName');
        // expect(instance.merchantName).to.be(expectedValueLiteral);
      });

      it('should have the property debitingIBAN (base name: "debitingIBAN")', function() {
        // TODO: update the code to test the property debitingIBAN
        expect(instance).to.have.property('debitingIBAN');
        // expect(instance.debitingIBAN).to.be(expectedValueLiteral);
      });

      it('should have the property mandateUsername (base name: "mandateUsername")', function() {
        // TODO: update the code to test the property mandateUsername
        expect(instance).to.have.property('mandateUsername');
        // expect(instance.mandateUsername).to.be(expectedValueLiteral);
      });

      it('should have the property insertedDateTime (base name: "insertedDateTime")', function() {
        // TODO: update the code to test the property insertedDateTime
        expect(instance).to.have.property('insertedDateTime');
        // expect(instance.insertedDateTime).to.be(expectedValueLiteral);
      });

      it('should have the property updatedDateTime (base name: "updatedDateTime")', function() {
        // TODO: update the code to test the property updatedDateTime
        expect(instance).to.have.property('updatedDateTime');
        // expect(instance.updatedDateTime).to.be(expectedValueLiteral);
      });

      it('should have the property lastActivityDateTime (base name: "lastActivityDateTime")', function() {
        // TODO: update the code to test the property lastActivityDateTime
        expect(instance).to.have.property('lastActivityDateTime');
        // expect(instance.lastActivityDateTime).to.be(expectedValueLiteral);
      });

      it('should have the property referenceNumber (base name: "referenceNumber")', function() {
        // TODO: update the code to test the property referenceNumber
        expect(instance).to.have.property('referenceNumber');
        // expect(instance.referenceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property reason (base name: "reason")', function() {
        // TODO: update the code to test the property reason
        expect(instance).to.have.property('reason');
        // expect(instance.reason).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

    });
  });

}));
