/*
 * Finac API
 * <b>Version Notes:- <br/>• All amounts fields in requests and responses have been changed from decimal to int64(cents). This means that 10.00 in version 1, is 1000 in version 2.<br/>• ThreeDS endpoints have been added to this version. These will replace the KBA endpoints from version 1.</br>• AccountId endpoint has changed HTTP verb from GET to POST, furthermore additional cardholder details need to be provided as part of the HTTP body.</b>
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinacApi);
  }
}(this, function(expect, FinacApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('MDESToken', function() {
      beforeEach(function() {
        instance = new FinacApi.MDESToken();
      });

      it('should create an instance of MDESToken', function() {
        // TODO: update the code to test MDESToken
        expect(instance).to.be.a(FinacApi.MDESToken);
      });

      it('should have the property tokenUniqueReference (base name: "tokenUniqueReference")', function() {
        // TODO: update the code to test the property tokenUniqueReference
        expect(instance).to.have.property('tokenUniqueReference');
        // expect(instance.tokenUniqueReference).to.be(expectedValueLiteral);
      });

      it('should have the property primaryAccountNumberUniqueReference (base name: "primaryAccountNumberUniqueReference")', function() {
        // TODO: update the code to test the property primaryAccountNumberUniqueReference
        expect(instance).to.have.property('primaryAccountNumberUniqueReference');
        // expect(instance.primaryAccountNumberUniqueReference).to.be(expectedValueLiteral);
      });

      it('should have the property tokenSuffix (base name: "tokenSuffix")', function() {
        // TODO: update the code to test the property tokenSuffix
        expect(instance).to.have.property('tokenSuffix');
        // expect(instance.tokenSuffix).to.be(expectedValueLiteral);
      });

      it('should have the property expirationDate (base name: "expirationDate")', function() {
        // TODO: update the code to test the property expirationDate
        expect(instance).to.have.property('expirationDate');
        // expect(instance.expirationDate).to.be(expectedValueLiteral);
      });

      it('should have the property accountPanSequenceNumber (base name: "accountPanSequenceNumber")', function() {
        // TODO: update the code to test the property accountPanSequenceNumber
        expect(instance).to.have.property('accountPanSequenceNumber');
        // expect(instance.accountPanSequenceNumber).to.be(expectedValueLiteral);
      });

      it('should have the property activationCodeExpirationDateTime (base name: "activationCodeExpirationDateTime")', function() {
        // TODO: update the code to test the property activationCodeExpirationDateTime
        expect(instance).to.have.property('activationCodeExpirationDateTime');
        // expect(instance.activationCodeExpirationDateTime).to.be(expectedValueLiteral);
      });

      it('should have the property correlationId (base name: "correlationId")', function() {
        // TODO: update the code to test the property correlationId
        expect(instance).to.have.property('correlationId');
        // expect(instance.correlationId).to.be(expectedValueLiteral);
      });

      it('should have the property currentStatusCode (base name: "currentStatusCode")', function() {
        // TODO: update the code to test the property currentStatusCode
        expect(instance).to.have.property('currentStatusCode');
        // expect(instance.currentStatusCode).to.be(expectedValueLiteral);
      });

      it('should have the property currentStatusDescription (base name: "currentStatusDescription")', function() {
        // TODO: update the code to test the property currentStatusDescription
        expect(instance).to.have.property('currentStatusDescription');
        // expect(instance.currentStatusDescription).to.be(expectedValueLiteral);
      });

      it('should have the property currentStatusDateTime (base name: "currentStatusDateTime")', function() {
        // TODO: update the code to test the property currentStatusDateTime
        expect(instance).to.have.property('currentStatusDateTime');
        // expect(instance.currentStatusDateTime).to.be(expectedValueLiteral);
      });

      it('should have the property digitizationRequestDateTime (base name: "digitizationRequestDateTime")', function() {
        // TODO: update the code to test the property digitizationRequestDateTime
        expect(instance).to.have.property('digitizationRequestDateTime');
        // expect(instance.digitizationRequestDateTime).to.be(expectedValueLiteral);
      });

      it('should have the property finalTokenizationDecision (base name: "finalTokenizationDecision")', function() {
        // TODO: update the code to test the property finalTokenizationDecision
        expect(instance).to.have.property('finalTokenizationDecision');
        // expect(instance.finalTokenizationDecision).to.be(expectedValueLiteral);
      });

      it('should have the property lastCommentId (base name: "lastCommentId")', function() {
        // TODO: update the code to test the property lastCommentId
        expect(instance).to.have.property('lastCommentId');
        // expect(instance.lastCommentId).to.be(expectedValueLiteral);
      });

      it('should have the property paymentAppInstanceId (base name: "paymentAppInstanceId")', function() {
        // TODO: update the code to test the property paymentAppInstanceId
        expect(instance).to.have.property('paymentAppInstanceId');
        // expect(instance.paymentAppInstanceId).to.be(expectedValueLiteral);
      });

      it('should have the property provisioningStatusCode (base name: "provisioningStatusCode")', function() {
        // TODO: update the code to test the property provisioningStatusCode
        expect(instance).to.have.property('provisioningStatusCode');
        // expect(instance.provisioningStatusCode).to.be(expectedValueLiteral);
      });

      it('should have the property provisioningStatusDescription (base name: "provisioningStatusDescription")', function() {
        // TODO: update the code to test the property provisioningStatusDescription
        expect(instance).to.have.property('provisioningStatusDescription');
        // expect(instance.provisioningStatusDescription).to.be(expectedValueLiteral);
      });

      it('should have the property storageTechnology (base name: "storageTechnology")', function() {
        // TODO: update the code to test the property storageTechnology
        expect(instance).to.have.property('storageTechnology');
        // expect(instance.storageTechnology).to.be(expectedValueLiteral);
      });

      it('should have the property suspender (base name: "suspender")', function() {
        // TODO: update the code to test the property suspender
        expect(instance).to.have.property('suspender');
        // expect(instance.suspender).to.be(expectedValueLiteral);
      });

      it('should have the property tokenActivatedDateTime (base name: "tokenActivatedDateTime")', function() {
        // TODO: update the code to test the property tokenActivatedDateTime
        expect(instance).to.have.property('tokenActivatedDateTime');
        // expect(instance.tokenActivatedDateTime).to.be(expectedValueLiteral);
      });

      it('should have the property tokenAssuranceLevel (base name: "tokenAssuranceLevel")', function() {
        // TODO: update the code to test the property tokenAssuranceLevel
        expect(instance).to.have.property('tokenAssuranceLevel');
        // expect(instance.tokenAssuranceLevel).to.be(expectedValueLiteral);
      });

      it('should have the property tokenRequestorId (base name: "tokenRequestorId")', function() {
        // TODO: update the code to test the property tokenRequestorId
        expect(instance).to.have.property('tokenRequestorId');
        // expect(instance.tokenRequestorId).to.be(expectedValueLiteral);
      });

      it('should have the property tokenRequestorName (base name: "tokenRequestorName")', function() {
        // TODO: update the code to test the property tokenRequestorName
        expect(instance).to.have.property('tokenRequestorName');
        // expect(instance.tokenRequestorName).to.be(expectedValueLiteral);
      });

      it('should have the property tokenType (base name: "tokenType")', function() {
        // TODO: update the code to test the property tokenType
        expect(instance).to.have.property('tokenType');
        // expect(instance.tokenType).to.be(expectedValueLiteral);
      });

      it('should have the property walletId (base name: "walletId")', function() {
        // TODO: update the code to test the property walletId
        expect(instance).to.have.property('walletId');
        // expect(instance.walletId).to.be(expectedValueLiteral);
      });

      it('should have the property devices (base name: "devices")', function() {
        // TODO: update the code to test the property devices
        expect(instance).to.have.property('devices');
        // expect(instance.devices).to.be(expectedValueLiteral);
      });

      it('should have the property tokenDeletedFromConsumerApp (base name: "tokenDeletedFromConsumerApp")', function() {
        // TODO: update the code to test the property tokenDeletedFromConsumerApp
        expect(instance).to.have.property('tokenDeletedFromConsumerApp');
        // expect(instance.tokenDeletedFromConsumerApp).to.be(expectedValueLiteral);
      });

      it('should have the property tokenRequestorConsumerFacingEntityName (base name: "tokenRequestorConsumerFacingEntityName")', function() {
        // TODO: update the code to test the property tokenRequestorConsumerFacingEntityName
        expect(instance).to.have.property('tokenRequestorConsumerFacingEntityName');
        // expect(instance.tokenRequestorConsumerFacingEntityName).to.be(expectedValueLiteral);
      });

    });
  });

}));
