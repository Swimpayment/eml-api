/*
 * Finac API
 * <b>Version Notes:- <br/>• All amounts fields in requests and responses have been changed from decimal to int64(cents). This means that 10.00 in version 1, is 1000 in version 2.<br/>• ThreeDS endpoints have been added to this version. These will replace the KBA endpoints from version 1.</br>• AccountId endpoint has changed HTTP verb from GET to POST, furthermore additional cardholder details need to be provided as part of the HTTP body.</b>
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinacApi);
  }
}(this, function(expect, FinacApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('AddCorporateBindingModel', function() {
      beforeEach(function() {
        instance = new FinacApi.AddCorporateBindingModel();
      });

      it('should create an instance of AddCorporateBindingModel', function() {
        // TODO: update the code to test AddCorporateBindingModel
        expect(instance).to.be.a(FinacApi.AddCorporateBindingModel);
      });

      it('should have the property walletName (base name: "walletName")', function() {
        // TODO: update the code to test the property walletName
        expect(instance).to.have.property('walletName');
        // expect(instance.walletName).to.be(expectedValueLiteral);
      });

      it('should have the property address1 (base name: "address1")', function() {
        // TODO: update the code to test the property address1
        expect(instance).to.have.property('address1');
        // expect(instance.address1).to.be(expectedValueLiteral);
      });

      it('should have the property address2 (base name: "address2")', function() {
        // TODO: update the code to test the property address2
        expect(instance).to.have.property('address2');
        // expect(instance.address2).to.be(expectedValueLiteral);
      });

      it('should have the property town (base name: "town")', function() {
        // TODO: update the code to test the property town
        expect(instance).to.have.property('town');
        // expect(instance.town).to.be(expectedValueLiteral);
      });

      it('should have the property country (base name: "country")', function() {
        // TODO: update the code to test the property country
        expect(instance).to.have.property('country');
        // expect(instance.country).to.be(expectedValueLiteral);
      });

      it('should have the property postCode (base name: "postCode")', function() {
        // TODO: update the code to test the property postCode
        expect(instance).to.have.property('postCode');
        // expect(instance.postCode).to.be(expectedValueLiteral);
      });

      it('should have the property mobile (base name: "mobile")', function() {
        // TODO: update the code to test the property mobile
        expect(instance).to.have.property('mobile');
        // expect(instance.mobile).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property salesForceId (base name: "salesForceId")', function() {
        // TODO: update the code to test the property salesForceId
        expect(instance).to.have.property('salesForceId');
        // expect(instance.salesForceId).to.be(expectedValueLiteral);
      });

      it('should have the property udfs (base name: "udfs")', function() {
        // TODO: update the code to test the property udfs
        expect(instance).to.have.property('udfs');
        // expect(instance.udfs).to.be(expectedValueLiteral);
      });

      it('should have the property currencies (base name: "currencies")', function() {
        // TODO: update the code to test the property currencies
        expect(instance).to.have.property('currencies');
        // expect(instance.currencies).to.be(expectedValueLiteral);
      });

      it('should have the property bins (base name: "bins")', function() {
        // TODO: update the code to test the property bins
        expect(instance).to.have.property('bins');
        // expect(instance.bins).to.be(expectedValueLiteral);
      });

    });
  });

}));
