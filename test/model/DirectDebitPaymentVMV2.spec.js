/*
 * Finac API
 * <b>Version Notes:- <br/>• All amounts fields in requests and responses have been changed from decimal to int64(cents). This means that 10.00 in version 1, is 1000 in version 2.<br/>• ThreeDS endpoints have been added to this version. These will replace the KBA endpoints from version 1.</br>• AccountId endpoint has changed HTTP verb from GET to POST, furthermore additional cardholder details need to be provided as part of the HTTP body.</b>
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinacApi);
  }
}(this, function(expect, FinacApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DirectDebitPaymentVMV2', function() {
      beforeEach(function() {
        instance = new FinacApi.DirectDebitPaymentVMV2();
      });

      it('should create an instance of DirectDebitPaymentVMV2', function() {
        // TODO: update the code to test DirectDebitPaymentVMV2
        expect(instance).to.be.a(FinacApi.DirectDebitPaymentVMV2);
      });

      it('should have the property bin (base name: "bin")', function() {
        // TODO: update the code to test the property bin
        expect(instance).to.have.property('bin');
        // expect(instance.bin).to.be(expectedValueLiteral);
      });

      it('should have the property messageId (base name: "messageId")', function() {
        // TODO: update the code to test the property messageId
        expect(instance).to.have.property('messageId');
        // expect(instance.messageId).to.be(expectedValueLiteral);
      });

      it('should have the property distributorCode (base name: "distributorCode")', function() {
        // TODO: update the code to test the property distributorCode
        expect(instance).to.have.property('distributorCode');
        // expect(instance.distributorCode).to.be(expectedValueLiteral);
      });

      it('should have the property binDistributorCodeId (base name: "binDistributorCodeId")', function() {
        // TODO: update the code to test the property binDistributorCodeId
        expect(instance).to.have.property('binDistributorCodeId');
        // expect(instance.binDistributorCodeId).to.be(expectedValueLiteral);
      });

      it('should have the property cardholderId (base name: "cardholderId")', function() {
        // TODO: update the code to test the property cardholderId
        expect(instance).to.have.property('cardholderId');
        // expect(instance.cardholderId).to.be(expectedValueLiteral);
      });

      it('should have the property cardholderFirstName (base name: "cardholderFirstName")', function() {
        // TODO: update the code to test the property cardholderFirstName
        expect(instance).to.have.property('cardholderFirstName');
        // expect(instance.cardholderFirstName).to.be(expectedValueLiteral);
      });

      it('should have the property cardholderLastName (base name: "cardholderLastName")', function() {
        // TODO: update the code to test the property cardholderLastName
        expect(instance).to.have.property('cardholderLastName');
        // expect(instance.cardholderLastName).to.be(expectedValueLiteral);
      });

      it('should have the property endToEndId (base name: "endToEndId")', function() {
        // TODO: update the code to test the property endToEndId
        expect(instance).to.have.property('endToEndId');
        // expect(instance.endToEndId).to.be(expectedValueLiteral);
      });

      it('should have the property instructionId (base name: "instructionId")', function() {
        // TODO: update the code to test the property instructionId
        expect(instance).to.have.property('instructionId');
        // expect(instance.instructionId).to.be(expectedValueLiteral);
      });

      it('should have the property transactionId (base name: "transactionId")', function() {
        // TODO: update the code to test the property transactionId
        expect(instance).to.have.property('transactionId');
        // expect(instance.transactionId).to.be(expectedValueLiteral);
      });

      it('should have the property mandate (base name: "mandate")', function() {
        // TODO: update the code to test the property mandate
        expect(instance).to.have.property('mandate');
        // expect(instance.mandate).to.be(expectedValueLiteral);
      });

      it('should have the property mandateId (base name: "mandateId")', function() {
        // TODO: update the code to test the property mandateId
        expect(instance).to.have.property('mandateId');
        // expect(instance.mandateId).to.be(expectedValueLiteral);
      });

      it('should have the property dateOfSignature (base name: "dateOfSignature")', function() {
        // TODO: update the code to test the property dateOfSignature
        expect(instance).to.have.property('dateOfSignature');
        // expect(instance.dateOfSignature).to.be(expectedValueLiteral);
      });

      it('should have the property requiredDateTime (base name: "requiredDateTime")', function() {
        // TODO: update the code to test the property requiredDateTime
        expect(instance).to.have.property('requiredDateTime');
        // expect(instance.requiredDateTime).to.be(expectedValueLiteral);
      });

      it('should have the property reference (base name: "reference")', function() {
        // TODO: update the code to test the property reference
        expect(instance).to.have.property('reference');
        // expect(instance.reference).to.be(expectedValueLiteral);
      });

      it('should have the property debtorFullName (base name: "debtorFullName")', function() {
        // TODO: update the code to test the property debtorFullName
        expect(instance).to.have.property('debtorFullName');
        // expect(instance.debtorFullName).to.be(expectedValueLiteral);
      });

      it('should have the property debtorIBAN (base name: "debtorIBAN")', function() {
        // TODO: update the code to test the property debtorIBAN
        expect(instance).to.have.property('debtorIBAN');
        // expect(instance.debtorIBAN).to.be(expectedValueLiteral);
      });

      it('should have the property debtorBIC (base name: "debtorBIC")', function() {
        // TODO: update the code to test the property debtorBIC
        expect(instance).to.have.property('debtorBIC');
        // expect(instance.debtorBIC).to.be(expectedValueLiteral);
      });

      it('should have the property debtorPostalAddress (base name: "debtorPostalAddress")', function() {
        // TODO: update the code to test the property debtorPostalAddress
        expect(instance).to.have.property('debtorPostalAddress');
        // expect(instance.debtorPostalAddress).to.be(expectedValueLiteral);
      });

      it('should have the property debtorCountry (base name: "debtorCountry")', function() {
        // TODO: update the code to test the property debtorCountry
        expect(instance).to.have.property('debtorCountry');
        // expect(instance.debtorCountry).to.be(expectedValueLiteral);
      });

      it('should have the property creditorFullName (base name: "creditorFullName")', function() {
        // TODO: update the code to test the property creditorFullName
        expect(instance).to.have.property('creditorFullName');
        // expect(instance.creditorFullName).to.be(expectedValueLiteral);
      });

      it('should have the property creditorIBAN (base name: "creditorIBAN")', function() {
        // TODO: update the code to test the property creditorIBAN
        expect(instance).to.have.property('creditorIBAN');
        // expect(instance.creditorIBAN).to.be(expectedValueLiteral);
      });

      it('should have the property creditorBIC (base name: "creditorBIC")', function() {
        // TODO: update the code to test the property creditorBIC
        expect(instance).to.have.property('creditorBIC');
        // expect(instance.creditorBIC).to.be(expectedValueLiteral);
      });

      it('should have the property creditorPostalAddress (base name: "creditorPostalAddress")', function() {
        // TODO: update the code to test the property creditorPostalAddress
        expect(instance).to.have.property('creditorPostalAddress');
        // expect(instance.creditorPostalAddress).to.be(expectedValueLiteral);
      });

      it('should have the property creditorCountry (base name: "creditorCountry")', function() {
        // TODO: update the code to test the property creditorCountry
        expect(instance).to.have.property('creditorCountry');
        // expect(instance.creditorCountry).to.be(expectedValueLiteral);
      });

      it('should have the property insertedDateTime (base name: "insertedDateTime")', function() {
        // TODO: update the code to test the property insertedDateTime
        expect(instance).to.have.property('insertedDateTime');
        // expect(instance.insertedDateTime).to.be(expectedValueLiteral);
      });

      it('should have the property directDebitId (base name: "directDebitId")', function() {
        // TODO: update the code to test the property directDebitId
        expect(instance).to.have.property('directDebitId');
        // expect(instance.directDebitId).to.be(expectedValueLiteral);
      });

      it('should have the property errorCode (base name: "errorCode")', function() {
        // TODO: update the code to test the property errorCode
        expect(instance).to.have.property('errorCode');
        // expect(instance.errorCode).to.be(expectedValueLiteral);
      });

      it('should have the property incomingOutgoing (base name: "incomingOutgoing")', function() {
        // TODO: update the code to test the property incomingOutgoing
        expect(instance).to.have.property('incomingOutgoing');
        // expect(instance.incomingOutgoing).to.be(expectedValueLiteral);
      });

      it('should have the property statusFlag (base name: "statusFlag")', function() {
        // TODO: update the code to test the property statusFlag
        expect(instance).to.have.property('statusFlag');
        // expect(instance.statusFlag).to.be(expectedValueLiteral);
      });

      it('should have the property transactionAuditId (base name: "transactionAuditId")', function() {
        // TODO: update the code to test the property transactionAuditId
        expect(instance).to.have.property('transactionAuditId');
        // expect(instance.transactionAuditId).to.be(expectedValueLiteral);
      });

      it('should have the property transactionStatusFlag (base name: "transactionStatusFlag")', function() {
        // TODO: update the code to test the property transactionStatusFlag
        expect(instance).to.have.property('transactionStatusFlag');
        // expect(instance.transactionStatusFlag).to.be(expectedValueLiteral);
      });

      it('should have the property transactionReason (base name: "transactionReason")', function() {
        // TODO: update the code to test the property transactionReason
        expect(instance).to.have.property('transactionReason');
        // expect(instance.transactionReason).to.be(expectedValueLiteral);
      });

      it('should have the property transactionInsertedDateTime (base name: "transactionInsertedDateTime")', function() {
        // TODO: update the code to test the property transactionInsertedDateTime
        expect(instance).to.have.property('transactionInsertedDateTime');
        // expect(instance.transactionInsertedDateTime).to.be(expectedValueLiteral);
      });

      it('should have the property returnId (base name: "returnId")', function() {
        // TODO: update the code to test the property returnId
        expect(instance).to.have.property('returnId');
        // expect(instance.returnId).to.be(expectedValueLiteral);
      });

      it('should have the property returnInsertedDateTime (base name: "returnInsertedDateTime")', function() {
        // TODO: update the code to test the property returnInsertedDateTime
        expect(instance).to.have.property('returnInsertedDateTime');
        // expect(instance.returnInsertedDateTime).to.be(expectedValueLiteral);
      });

      it('should have the property returnIncomingOutgoing (base name: "returnIncomingOutgoing")', function() {
        // TODO: update the code to test the property returnIncomingOutgoing
        expect(instance).to.have.property('returnIncomingOutgoing');
        // expect(instance.returnIncomingOutgoing).to.be(expectedValueLiteral);
      });

      it('should have the property returnReason (base name: "returnReason")', function() {
        // TODO: update the code to test the property returnReason
        expect(instance).to.have.property('returnReason');
        // expect(instance.returnReason).to.be(expectedValueLiteral);
      });

      it('should have the property returnStatus (base name: "returnStatus")', function() {
        // TODO: update the code to test the property returnStatus
        expect(instance).to.have.property('returnStatus');
        // expect(instance.returnStatus).to.be(expectedValueLiteral);
      });

      it('should have the property returnReference (base name: "returnReference")', function() {
        // TODO: update the code to test the property returnReference
        expect(instance).to.have.property('returnReference');
        // expect(instance.returnReference).to.be(expectedValueLiteral);
      });

      it('should have the property receivedDateTime (base name: "receivedDateTime")', function() {
        // TODO: update the code to test the property receivedDateTime
        expect(instance).to.have.property('receivedDateTime');
        // expect(instance.receivedDateTime).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property returnAmount (base name: "returnAmount")', function() {
        // TODO: update the code to test the property returnAmount
        expect(instance).to.have.property('returnAmount');
        // expect(instance.returnAmount).to.be(expectedValueLiteral);
      });

    });
  });

}));
