/*
 * Finac API
 * <b>Version Notes:- <br/>• All amounts fields in requests and responses have been changed from decimal to int64(cents). This means that 10.00 in version 1, is 1000 in version 2.<br/>• ThreeDS endpoints have been added to this version. These will replace the KBA endpoints from version 1.</br>• AccountId endpoint has changed HTTP verb from GET to POST, furthermore additional cardholder details need to be provided as part of the HTTP body.</b>
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinacApi);
  }
}(this, function(expect, FinacApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CorporateTransactionHistoryViewModel', function() {
      beforeEach(function() {
        instance = new FinacApi.CorporateTransactionHistoryViewModel();
      });

      it('should create an instance of CorporateTransactionHistoryViewModel', function() {
        // TODO: update the code to test CorporateTransactionHistoryViewModel
        expect(instance).to.be.a(FinacApi.CorporateTransactionHistoryViewModel);
      });

      it('should have the property transactionId (base name: "transactionId")', function() {
        // TODO: update the code to test the property transactionId
        expect(instance).to.have.property('transactionId');
        // expect(instance.transactionId).to.be(expectedValueLiteral);
      });

      it('should have the property _date (base name: "date")', function() {
        // TODO: update the code to test the property _date
        expect(instance).to.have.property('_date');
        // expect(instance._date).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property creditAmount (base name: "creditAmount")', function() {
        // TODO: update the code to test the property creditAmount
        expect(instance).to.have.property('creditAmount');
        // expect(instance.creditAmount).to.be(expectedValueLiteral);
      });

      it('should have the property debitAmount (base name: "debitAmount")', function() {
        // TODO: update the code to test the property debitAmount
        expect(instance).to.have.property('debitAmount');
        // expect(instance.debitAmount).to.be(expectedValueLiteral);
      });

      it('should have the property fee (base name: "fee")', function() {
        // TODO: update the code to test the property fee
        expect(instance).to.have.property('fee');
        // expect(instance.fee).to.be(expectedValueLiteral);
      });

      it('should have the property balance (base name: "balance")', function() {
        // TODO: update the code to test the property balance
        expect(instance).to.have.property('balance');
        // expect(instance.balance).to.be(expectedValueLiteral);
      });

      it('should have the property udf (base name: "udf")', function() {
        // TODO: update the code to test the property udf
        expect(instance).to.have.property('udf');
        // expect(instance.udf).to.be(expectedValueLiteral);
      });

      it('should have the property reversalId (base name: "reversalId")', function() {
        // TODO: update the code to test the property reversalId
        expect(instance).to.have.property('reversalId');
        // expect(instance.reversalId).to.be(expectedValueLiteral);
      });

      it('should have the property authId (base name: "authId")', function() {
        // TODO: update the code to test the property authId
        expect(instance).to.have.property('authId');
        // expect(instance.authId).to.be(expectedValueLiteral);
      });

      it('should have the property authSettlementFlag (base name: "authSettlementFlag")', function() {
        // TODO: update the code to test the property authSettlementFlag
        expect(instance).to.have.property('authSettlementFlag');
        // expect(instance.authSettlementFlag).to.be(expectedValueLiteral);
      });

      it('should have the property ledgerBalance (base name: "ledgerBalance")', function() {
        // TODO: update the code to test the property ledgerBalance
        expect(instance).to.have.property('ledgerBalance');
        // expect(instance.ledgerBalance).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

    });
  });

}));
