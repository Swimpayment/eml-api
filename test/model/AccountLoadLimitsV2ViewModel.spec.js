/*
 * Finac API
 * <b>Version Notes:- <br/>• All amounts fields in requests and responses have been changed from decimal to int64(cents). This means that 10.00 in version 1, is 1000 in version 2.<br/>• ThreeDS endpoints have been added to this version. These will replace the KBA endpoints from version 1.</br>• AccountId endpoint has changed HTTP verb from GET to POST, furthermore additional cardholder details need to be provided as part of the HTTP body.</b>
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinacApi);
  }
}(this, function(expect, FinacApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('AccountLoadLimitsV2ViewModel', function() {
      beforeEach(function() {
        instance = new FinacApi.AccountLoadLimitsV2ViewModel();
      });

      it('should create an instance of AccountLoadLimitsV2ViewModel', function() {
        // TODO: update the code to test AccountLoadLimitsV2ViewModel
        expect(instance).to.be.a(FinacApi.AccountLoadLimitsV2ViewModel);
      });

      it('should have the property bin (base name: "bin")', function() {
        // TODO: update the code to test the property bin
        expect(instance).to.have.property('bin');
        // expect(instance.bin).to.be(expectedValueLiteral);
      });

      it('should have the property dc (base name: "dc")', function() {
        // TODO: update the code to test the property dc
        expect(instance).to.have.property('dc');
        // expect(instance.dc).to.be(expectedValueLiteral);
      });

      it('should have the property cardType (base name: "cardType")', function() {
        // TODO: update the code to test the property cardType
        expect(instance).to.have.property('cardType');
        // expect(instance.cardType).to.be(expectedValueLiteral);
      });

      it('should have the property maxLoadPerDay (base name: "maxLoadPerDay")', function() {
        // TODO: update the code to test the property maxLoadPerDay
        expect(instance).to.have.property('maxLoadPerDay');
        // expect(instance.maxLoadPerDay).to.be(expectedValueLiteral);
      });

      it('should have the property maxLoadTriesPerDay (base name: "maxLoadTriesPerDay")', function() {
        // TODO: update the code to test the property maxLoadTriesPerDay
        expect(instance).to.have.property('maxLoadTriesPerDay');
        // expect(instance.maxLoadTriesPerDay).to.be(expectedValueLiteral);
      });

      it('should have the property maxLoadLimit (base name: "maxLoadLimit")', function() {
        // TODO: update the code to test the property maxLoadLimit
        expect(instance).to.have.property('maxLoadLimit');
        // expect(instance.maxLoadLimit).to.be(expectedValueLiteral);
      });

      it('should have the property minLoadLimit (base name: "minLoadLimit")', function() {
        // TODO: update the code to test the property minLoadLimit
        expect(instance).to.have.property('minLoadLimit');
        // expect(instance.minLoadLimit).to.be(expectedValueLiteral);
      });

      it('should have the property maxBalanceonCard (base name: "maxBalanceonCard")', function() {
        // TODO: update the code to test the property maxBalanceonCard
        expect(instance).to.have.property('maxBalanceonCard');
        // expect(instance.maxBalanceonCard).to.be(expectedValueLiteral);
      });

      it('should have the property c2CMaxLoadLimit (base name: "c2CMaxLoadLimit")', function() {
        // TODO: update the code to test the property c2CMaxLoadLimit
        expect(instance).to.have.property('c2CMaxLoadLimit');
        // expect(instance.c2CMaxLoadLimit).to.be(expectedValueLiteral);
      });

      it('should have the property c2CMinLoadLimit (base name: "c2CMinLoadLimit")', function() {
        // TODO: update the code to test the property c2CMinLoadLimit
        expect(instance).to.have.property('c2CMinLoadLimit');
        // expect(instance.c2CMinLoadLimit).to.be(expectedValueLiteral);
      });

      it('should have the property c2CLoadTriesPerDay (base name: "c2CLoadTriesPerDay")', function() {
        // TODO: update the code to test the property c2CLoadTriesPerDay
        expect(instance).to.have.property('c2CLoadTriesPerDay');
        // expect(instance.c2CLoadTriesPerDay).to.be(expectedValueLiteral);
      });

      it('should have the property monthlyLoadLimits (base name: "monthlyLoadLimits")', function() {
        // TODO: update the code to test the property monthlyLoadLimits
        expect(instance).to.have.property('monthlyLoadLimits');
        // expect(instance.monthlyLoadLimits).to.be(expectedValueLiteral);
      });

      it('should have the property totalLoadTries (base name: "totalLoadTries")', function() {
        // TODO: update the code to test the property totalLoadTries
        expect(instance).to.have.property('totalLoadTries');
        // expect(instance.totalLoadTries).to.be(expectedValueLiteral);
      });

      it('should have the property sddMonthlyLoadLimits (base name: "sddMonthlyLoadLimits")', function() {
        // TODO: update the code to test the property sddMonthlyLoadLimits
        expect(instance).to.have.property('sddMonthlyLoadLimits');
        // expect(instance.sddMonthlyLoadLimits).to.be(expectedValueLiteral);
      });

      it('should have the property productTypeID (base name: "productTypeID")', function() {
        // TODO: update the code to test the property productTypeID
        expect(instance).to.have.property('productTypeID');
        // expect(instance.productTypeID).to.be(expectedValueLiteral);
      });

      it('should have the property yearlyLoadLimit (base name: "yearlyLoadLimit")', function() {
        // TODO: update the code to test the property yearlyLoadLimit
        expect(instance).to.have.property('yearlyLoadLimit');
        // expect(instance.yearlyLoadLimit).to.be(expectedValueLiteral);
      });

      it('should have the property quarterlyLimit (base name: "quarterlyLimit")', function() {
        // TODO: update the code to test the property quarterlyLimit
        expect(instance).to.have.property('quarterlyLimit');
        // expect(instance.quarterlyLimit).to.be(expectedValueLiteral);
      });

      it('should have the property maxMonthlyLoadCardLimit (base name: "maxMonthlyLoadCardLimit")', function() {
        // TODO: update the code to test the property maxMonthlyLoadCardLimit
        expect(instance).to.have.property('maxMonthlyLoadCardLimit');
        // expect(instance.maxMonthlyLoadCardLimit).to.be(expectedValueLiteral);
      });

      it('should have the property maxYearlyLoadCardLimit (base name: "maxYearlyLoadCardLimit")', function() {
        // TODO: update the code to test the property maxYearlyLoadCardLimit
        expect(instance).to.have.property('maxYearlyLoadCardLimit');
        // expect(instance.maxYearlyLoadCardLimit).to.be(expectedValueLiteral);
      });

      it('should have the property maxMonthlyLoadMobileLimit (base name: "maxMonthlyLoadMobileLimit")', function() {
        // TODO: update the code to test the property maxMonthlyLoadMobileLimit
        expect(instance).to.have.property('maxMonthlyLoadMobileLimit');
        // expect(instance.maxMonthlyLoadMobileLimit).to.be(expectedValueLiteral);
      });

      it('should have the property maxYearlyLoadMobileLimit (base name: "maxYearlyLoadMobileLimit")', function() {
        // TODO: update the code to test the property maxYearlyLoadMobileLimit
        expect(instance).to.have.property('maxYearlyLoadMobileLimit');
        // expect(instance.maxYearlyLoadMobileLimit).to.be(expectedValueLiteral);
      });

      it('should have the property maxMonthlyLoadEmailLimit (base name: "maxMonthlyLoadEmailLimit")', function() {
        // TODO: update the code to test the property maxMonthlyLoadEmailLimit
        expect(instance).to.have.property('maxMonthlyLoadEmailLimit');
        // expect(instance.maxMonthlyLoadEmailLimit).to.be(expectedValueLiteral);
      });

      it('should have the property maxYearlyLoadEmailLimit (base name: "maxYearlyLoadEmailLimit")', function() {
        // TODO: update the code to test the property maxYearlyLoadEmailLimit
        expect(instance).to.have.property('maxYearlyLoadEmailLimit');
        // expect(instance.maxYearlyLoadEmailLimit).to.be(expectedValueLiteral);
      });

      it('should have the property maxMonthlyLoadNameDOBLimit (base name: "maxMonthlyLoadNameDOBLimit")', function() {
        // TODO: update the code to test the property maxMonthlyLoadNameDOBLimit
        expect(instance).to.have.property('maxMonthlyLoadNameDOBLimit');
        // expect(instance.maxMonthlyLoadNameDOBLimit).to.be(expectedValueLiteral);
      });

      it('should have the property maxYearlyLoadNameDOBLimit (base name: "maxYearlyLoadNameDOBLimit")', function() {
        // TODO: update the code to test the property maxYearlyLoadNameDOBLimit
        expect(instance).to.have.property('maxYearlyLoadNameDOBLimit');
        // expect(instance.maxYearlyLoadNameDOBLimit).to.be(expectedValueLiteral);
      });

      it('should have the property maxMonthlyLoadNameLimit (base name: "maxMonthlyLoadNameLimit")', function() {
        // TODO: update the code to test the property maxMonthlyLoadNameLimit
        expect(instance).to.have.property('maxMonthlyLoadNameLimit');
        // expect(instance.maxMonthlyLoadNameLimit).to.be(expectedValueLiteral);
      });

      it('should have the property maxYearlyLoadNameLimit (base name: "maxYearlyLoadNameLimit")', function() {
        // TODO: update the code to test the property maxYearlyLoadNameLimit
        expect(instance).to.have.property('maxYearlyLoadNameLimit');
        // expect(instance.maxYearlyLoadNameLimit).to.be(expectedValueLiteral);
      });

    });
  });

}));
