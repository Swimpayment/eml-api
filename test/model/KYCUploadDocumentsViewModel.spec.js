/*
 * Finac API
 * <b>Version Notes:- <br/>• All amounts fields in requests and responses have been changed from decimal to int64(cents). This means that 10.00 in version 1, is 1000 in version 2.<br/>• ThreeDS endpoints have been added to this version. These will replace the KBA endpoints from version 1.</br>• AccountId endpoint has changed HTTP verb from GET to POST, furthermore additional cardholder details need to be provided as part of the HTTP body.</b>
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinacApi);
  }
}(this, function(expect, FinacApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('KYCUploadDocumentsViewModel', function() {
      beforeEach(function() {
        instance = new FinacApi.KYCUploadDocumentsViewModel();
      });

      it('should create an instance of KYCUploadDocumentsViewModel', function() {
        // TODO: update the code to test KYCUploadDocumentsViewModel
        expect(instance).to.be.a(FinacApi.KYCUploadDocumentsViewModel);
      });

      it('should have the property retryUpload (base name: "retryUpload")', function() {
        // TODO: update the code to test the property retryUpload
        expect(instance).to.have.property('retryUpload');
        // expect(instance.retryUpload).to.be(expectedValueLiteral);
      });

      it('should have the property newProductType (base name: "newProductType")', function() {
        // TODO: update the code to test the property newProductType
        expect(instance).to.have.property('newProductType');
        // expect(instance.newProductType).to.be(expectedValueLiteral);
      });

      it('should have the property newQueue (base name: "newQueue")', function() {
        // TODO: update the code to test the property newQueue
        expect(instance).to.have.property('newQueue');
        // expect(instance.newQueue).to.be(expectedValueLiteral);
      });

      it('should have the property kycResults (base name: "kycResults")', function() {
        // TODO: update the code to test the property kycResults
        expect(instance).to.have.property('kycResults');
        // expect(instance.kycResults).to.be(expectedValueLiteral);
      });

      it('should have the property alreadyProcessed (base name: "alreadyProcessed")', function() {
        // TODO: update the code to test the property alreadyProcessed
        expect(instance).to.have.property('alreadyProcessed');
        // expect(instance.alreadyProcessed).to.be(expectedValueLiteral);
      });

      it('should have the property redirectUrl (base name: "redirectUrl")', function() {
        // TODO: update the code to test the property redirectUrl
        expect(instance).to.have.property('redirectUrl');
        // expect(instance.redirectUrl).to.be(expectedValueLiteral);
      });

      it('should have the property uuid (base name: "uuid")', function() {
        // TODO: update the code to test the property uuid
        expect(instance).to.have.property('uuid');
        // expect(instance.uuid).to.be(expectedValueLiteral);
      });

      it('should have the property stillInProgress (base name: "stillInProgress")', function() {
        // TODO: update the code to test the property stillInProgress
        expect(instance).to.have.property('stillInProgress');
        // expect(instance.stillInProgress).to.be(expectedValueLiteral);
      });

      it('should have the property documentID (base name: "documentID")', function() {
        // TODO: update the code to test the property documentID
        expect(instance).to.have.property('documentID');
        // expect(instance.documentID).to.be(expectedValueLiteral);
      });

    });
  });

}));
