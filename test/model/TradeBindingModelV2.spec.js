/*
 * Finac API
 * <b>Version Notes:- <br/>• All amounts fields in requests and responses have been changed from decimal to int64(cents). This means that 10.00 in version 1, is 1000 in version 2.<br/>• ThreeDS endpoints have been added to this version. These will replace the KBA endpoints from version 1.</br>• AccountId endpoint has changed HTTP verb from GET to POST, furthermore additional cardholder details need to be provided as part of the HTTP body.</b>
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.42
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FinacApi);
  }
}(this, function(expect, FinacApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TradeBindingModelV2', function() {
      beforeEach(function() {
        instance = new FinacApi.TradeBindingModelV2();
      });

      it('should create an instance of TradeBindingModelV2', function() {
        // TODO: update the code to test TradeBindingModelV2
        expect(instance).to.be.a(FinacApi.TradeBindingModelV2);
      });

      it('should have the property toId (base name: "toId")', function() {
        // TODO: update the code to test the property toId
        expect(instance).to.have.property('toId');
        // expect(instance.toId).to.be(expectedValueLiteral);
      });

      it('should have the property fromSourceType (base name: "fromSourceType")', function() {
        // TODO: update the code to test the property fromSourceType
        expect(instance).to.have.property('fromSourceType');
        // expect(instance.fromSourceType).to.be(expectedValueLiteral);
      });

      it('should have the property toSourceType (base name: "toSourceType")', function() {
        // TODO: update the code to test the property toSourceType
        expect(instance).to.have.property('toSourceType');
        // expect(instance.toSourceType).to.be(expectedValueLiteral);
      });

      it('should have the property fromAmount (base name: "fromAmount")', function() {
        // TODO: update the code to test the property fromAmount
        expect(instance).to.have.property('fromAmount');
        // expect(instance.fromAmount).to.be(expectedValueLiteral);
      });

      it('should have the property toAmount (base name: "toAmount")', function() {
        // TODO: update the code to test the property toAmount
        expect(instance).to.have.property('toAmount');
        // expect(instance.toAmount).to.be(expectedValueLiteral);
      });

      it('should have the property fromCurrencyCode (base name: "fromCurrencyCode")', function() {
        // TODO: update the code to test the property fromCurrencyCode
        expect(instance).to.have.property('fromCurrencyCode');
        // expect(instance.fromCurrencyCode).to.be(expectedValueLiteral);
      });

      it('should have the property toCurrencyCode (base name: "toCurrencyCode")', function() {
        // TODO: update the code to test the property toCurrencyCode
        expect(instance).to.have.property('toCurrencyCode');
        // expect(instance.toCurrencyCode).to.be(expectedValueLiteral);
      });

      it('should have the property conversionRate (base name: "conversionRate")', function() {
        // TODO: update the code to test the property conversionRate
        expect(instance).to.have.property('conversionRate');
        // expect(instance.conversionRate).to.be(expectedValueLiteral);
      });

      it('should have the property feeCode (base name: "feeCode")', function() {
        // TODO: update the code to test the property feeCode
        expect(instance).to.have.property('feeCode');
        // expect(instance.feeCode).to.be(expectedValueLiteral);
      });

      it('should have the property corporateId (base name: "corporateId")', function() {
        // TODO: update the code to test the property corporateId
        expect(instance).to.have.property('corporateId');
        // expect(instance.corporateId).to.be(expectedValueLiteral);
      });

      it('should have the property userDefined (base name: "userDefined")', function() {
        // TODO: update the code to test the property userDefined
        expect(instance).to.have.property('userDefined');
        // expect(instance.userDefined).to.be(expectedValueLiteral);
      });

      it('should have the property walletTransactionDescription (base name: "walletTransactionDescription")', function() {
        // TODO: update the code to test the property walletTransactionDescription
        expect(instance).to.have.property('walletTransactionDescription');
        // expect(instance.walletTransactionDescription).to.be(expectedValueLiteral);
      });

      it('should have the property accountTransactionDescription (base name: "accountTransactionDescription")', function() {
        // TODO: update the code to test the property accountTransactionDescription
        expect(instance).to.have.property('accountTransactionDescription');
        // expect(instance.accountTransactionDescription).to.be(expectedValueLiteral);
      });

    });
  });

}));
