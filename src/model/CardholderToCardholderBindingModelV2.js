/*
 * Finac API
 * <b>Version Notes:- <br/>• All amounts fields in requests and responses have been changed from decimal to int64(cents). This means that 10.00 in version 1, is 1000 in version 2.<br/>• ThreeDS endpoints have been added to this version. These will replace the KBA endpoints from version 1.</br>• AccountId endpoint has changed HTTP verb from GET to POST, furthermore additional cardholder details need to be provided as part of the HTTP body.</b>
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.43
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The CardholderToCardholderBindingModelV2 model module.
 * @module model/CardholderToCardholderBindingModelV2
 * @version 2.0
 */
export class CardholderToCardholderBindingModelV2 {
  /**
   * Constructs a new <code>CardholderToCardholderBindingModelV2</code>.
   * Cardholder to cardholder transfer.
   * @alias module:model/CardholderToCardholderBindingModelV2
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>CardholderToCardholderBindingModelV2</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CardholderToCardholderBindingModelV2} obj Optional instance to populate.
   * @return {module:model/CardholderToCardholderBindingModelV2} The populated <code>CardholderToCardholderBindingModelV2</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new CardholderToCardholderBindingModelV2();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('toId'))
        obj.toId = ApiClient.convertToType(data['toId'], 'String');
      if (data.hasOwnProperty('amount'))
        obj.amount = ApiClient.convertToType(data['amount'], 'Number');
      if (data.hasOwnProperty('currencyCode'))
        obj.currencyCode = ApiClient.convertToType(data['currencyCode'], 'String');
      if (data.hasOwnProperty('toCurrencyCode'))
        obj.toCurrencyCode = ApiClient.convertToType(data['toCurrencyCode'], 'String');
      if (data.hasOwnProperty('terminalOwner'))
        obj.terminalOwner = ApiClient.convertToType(data['terminalOwner'], 'String');
      if (data.hasOwnProperty('terminalLocation'))
        obj.terminalLocation = ApiClient.convertToType(data['terminalLocation'], 'String');
      if (data.hasOwnProperty('terminalCity'))
        obj.terminalCity = ApiClient.convertToType(data['terminalCity'], 'String');
      if (data.hasOwnProperty('terminalState'))
        obj.terminalState = ApiClient.convertToType(data['terminalState'], 'String');
      if (data.hasOwnProperty('terminalId'))
        obj.terminalId = ApiClient.convertToType(data['terminalId'], 'String');
      if (data.hasOwnProperty('countryCode'))
        obj.countryCode = ApiClient.convertToType(data['countryCode'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('feeCode'))
        obj.feeCode = ApiClient.convertToType(data['feeCode'], 'String');
    }
    return obj;
  }
}

/**
 * From cardholder id.
 * @member {String} id
 */
CardholderToCardholderBindingModelV2.prototype.id = undefined;

/**
 * To cardholder id.
 * @member {String} toId
 */
CardholderToCardholderBindingModelV2.prototype.toId = undefined;

/**
 * Amount to transfer.
 * @member {Number} amount
 */
CardholderToCardholderBindingModelV2.prototype.amount = undefined;

/**
 * Currency code, ISO-4217 3 letters
 * @member {String} currencyCode
 */
CardholderToCardholderBindingModelV2.prototype.currencyCode = undefined;

/**
 * Currency code, ISO-4217 3 letters
 * @member {String} toCurrencyCode
 */
CardholderToCardholderBindingModelV2.prototype.toCurrencyCode = undefined;

/**
 * Open entry field - can be filled with your custom description. This field is shown on your statements.
 * @member {String} terminalOwner
 */
CardholderToCardholderBindingModelV2.prototype.terminalOwner = undefined;

/**
 * Open entry field - can be filled with your custom description. This field is shown on your statements.
 * @member {String} terminalLocation
 */
CardholderToCardholderBindingModelV2.prototype.terminalLocation = undefined;

/**
 * Open entry field
 * @member {String} terminalCity
 */
CardholderToCardholderBindingModelV2.prototype.terminalCity = undefined;

/**
 * Open entry field
 * @member {String} terminalState
 */
CardholderToCardholderBindingModelV2.prototype.terminalState = undefined;

/**
 * Open entry field
 * @member {String} terminalId
 */
CardholderToCardholderBindingModelV2.prototype.terminalId = undefined;

/**
 * Required in multicurrency programs only. ISO 1366-1 three character country code
 * @member {String} countryCode
 */
CardholderToCardholderBindingModelV2.prototype.countryCode = undefined;

/**
 * Must be filled with whitelisted description. 'Card To Card Transfer' is whitelisted as default
 * @member {String} description
 */
CardholderToCardholderBindingModelV2.prototype.description = undefined;

/**
 * Describes the type of transaction.    - Card to Card = **WTR  - Card to Account = **CTA   - Account to Card = **ATC  - Account to Account = **WTR
 * @member {String} feeCode
 */
CardholderToCardholderBindingModelV2.prototype.feeCode = undefined;

