/*
 * Finac API
 * <b>Version Notes:- <br/>• All amounts fields in requests and responses have been changed from decimal to int64(cents). This means that 10.00 in version 1, is 1000 in version 2.<br/>• ThreeDS endpoints have been added to this version. These will replace the KBA endpoints from version 1.</br>• AccountId endpoint has changed HTTP verb from GET to POST, furthermore additional cardholder details need to be provided as part of the HTTP body.</b>
 *
 * OpenAPI spec version: 2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.43
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The TransactionViewModel model module.
 * @module model/TransactionViewModel
 * @version 2.0
 */
export class TransactionViewModel {
  /**
   * Constructs a new <code>TransactionViewModel</code>.
   * @alias module:model/TransactionViewModel
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>TransactionViewModel</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TransactionViewModel} obj Optional instance to populate.
   * @return {module:model/TransactionViewModel} The populated <code>TransactionViewModel</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new TransactionViewModel();
      if (data.hasOwnProperty('date'))
        obj._date = ApiClient.convertToType(data['date'], 'String');
      if (data.hasOwnProperty('transactionType'))
        obj.transactionType = ApiClient.convertToType(data['transactionType'], 'String');
      if (data.hasOwnProperty('cardType'))
        obj.cardType = ApiClient.convertToType(data['cardType'], 'String');
      if (data.hasOwnProperty('mti'))
        obj.mti = ApiClient.convertToType(data['mti'], 'String');
      if (data.hasOwnProperty('arn'))
        obj.arn = ApiClient.convertToType(data['arn'], 'String');
      if (data.hasOwnProperty('stn'))
        obj.stn = ApiClient.convertToType(data['stn'], 'String');
      if (data.hasOwnProperty('authenticationNumber'))
        obj.authenticationNumber = ApiClient.convertToType(data['authenticationNumber'], 'String');
      if (data.hasOwnProperty('recordType'))
        obj.recordType = ApiClient.convertToType(data['recordType'], 'String');
      if (data.hasOwnProperty('transactionOrigin'))
        obj.transactionOrigin = ApiClient.convertToType(data['transactionOrigin'], 'String');
      if (data.hasOwnProperty('transactionDescription'))
        obj.transactionDescription = ApiClient.convertToType(data['transactionDescription'], 'String');
      if (data.hasOwnProperty('amount'))
        obj.amount = ApiClient.convertToType(data['amount'], 'String');
      if (data.hasOwnProperty('fee'))
        obj.fee = ApiClient.convertToType(data['fee'], 'String');
      if (data.hasOwnProperty('availableBalance'))
        obj.availableBalance = ApiClient.convertToType(data['availableBalance'], 'String');
      if (data.hasOwnProperty('ledgerBalance'))
        obj.ledgerBalance = ApiClient.convertToType(data['ledgerBalance'], 'String');
      if (data.hasOwnProperty('clientId'))
        obj.clientId = ApiClient.convertToType(data['clientId'], 'String');
      if (data.hasOwnProperty('terminalID'))
        obj.terminalID = ApiClient.convertToType(data['terminalID'], 'String');
      if (data.hasOwnProperty('terminalLocation'))
        obj.terminalLocation = ApiClient.convertToType(data['terminalLocation'], 'String');
      if (data.hasOwnProperty('terminalOwner'))
        obj.terminalOwner = ApiClient.convertToType(data['terminalOwner'], 'String');
      if (data.hasOwnProperty('terminalCity'))
        obj.terminalCity = ApiClient.convertToType(data['terminalCity'], 'String');
      if (data.hasOwnProperty('terminalState'))
        obj.terminalState = ApiClient.convertToType(data['terminalState'], 'String');
      if (data.hasOwnProperty('terminalCountry'))
        obj.terminalCountry = ApiClient.convertToType(data['terminalCountry'], 'String');
      if (data.hasOwnProperty('terminalCurrency'))
        obj.terminalCurrency = ApiClient.convertToType(data['terminalCurrency'], 'String');
      if (data.hasOwnProperty('mcc'))
        obj.mcc = ApiClient.convertToType(data['mcc'], 'String');
      if (data.hasOwnProperty('surcharge'))
        obj.surcharge = ApiClient.convertToType(data['surcharge'], 'String');
      if (data.hasOwnProperty('issuerFee'))
        obj.issuerFee = ApiClient.convertToType(data['issuerFee'], 'String');
      if (data.hasOwnProperty('responseCode'))
        obj.responseCode = ApiClient.convertToType(data['responseCode'], 'String');
      if (data.hasOwnProperty('foreignExchangeFee'))
        obj.foreignExchangeFee = ApiClient.convertToType(data['foreignExchangeFee'], 'String');
      if (data.hasOwnProperty('currency'))
        obj.currency = ApiClient.convertToType(data['currency'], 'String');
      if (data.hasOwnProperty('transactionCodeDescription'))
        obj.transactionCodeDescription = ApiClient.convertToType(data['transactionCodeDescription'], 'String');
      if (data.hasOwnProperty('transactionResult'))
        obj.transactionResult = ApiClient.convertToType(data['transactionResult'], 'String');
      if (data.hasOwnProperty('originalTransactionAmount'))
        obj.originalTransactionAmount = ApiClient.convertToType(data['originalTransactionAmount'], 'String');
      if (data.hasOwnProperty('conversionRate'))
        obj.conversionRate = ApiClient.convertToType(data['conversionRate'], 'Number');
      if (data.hasOwnProperty('originalHoldAmount'))
        obj.originalHoldAmount = ApiClient.convertToType(data['originalHoldAmount'], 'String');
      if (data.hasOwnProperty('cardAcceptorIdCode'))
        obj.cardAcceptorIdCode = ApiClient.convertToType(data['cardAcceptorIdCode'], 'String');
      if (data.hasOwnProperty('actionCodeDescription'))
        obj.actionCodeDescription = ApiClient.convertToType(data['actionCodeDescription'], 'String');
      if (data.hasOwnProperty('acquiringInstitution'))
        obj.acquiringInstitution = ApiClient.convertToType(data['acquiringInstitution'], 'String');
      if (data.hasOwnProperty('processor'))
        obj.processor = ApiClient.convertToType(data['processor'], 'String');
      if (data.hasOwnProperty('posEntryMode'))
        obj.posEntryMode = ApiClient.convertToType(data['posEntryMode'], 'String');
      if (data.hasOwnProperty('atmFee'))
        obj.atmFee = ApiClient.convertToType(data['atmFee'], 'String');
      if (data.hasOwnProperty('walletProvider'))
        obj.walletProvider = ApiClient.convertToType(data['walletProvider'], 'String');
      if (data.hasOwnProperty('cardId'))
        obj.cardId = ApiClient.convertToType(data['cardId'], 'String');
      if (data.hasOwnProperty('walletId'))
        obj.walletId = ApiClient.convertToType(data['walletId'], 'String');
      if (data.hasOwnProperty('uniqueReference'))
        obj.uniqueReference = ApiClient.convertToType(data['uniqueReference'], 'String');
    }
    return obj;
  }
}

/**
 * Date and Time of the transaction in UTC (yyyy-MM-ddTHH:mm:ss.fffZ)
 * @member {String} _date
 */
TransactionViewModel.prototype._date = undefined;

/**
 * @member {String} transactionType
 */
TransactionViewModel.prototype.transactionType = undefined;

/**
 * @member {String} cardType
 */
TransactionViewModel.prototype.cardType = undefined;

/**
 * @member {String} mti
 */
TransactionViewModel.prototype.mti = undefined;

/**
 * @member {String} arn
 */
TransactionViewModel.prototype.arn = undefined;

/**
 * @member {String} stn
 */
TransactionViewModel.prototype.stn = undefined;

/**
 * @member {String} authenticationNumber
 */
TransactionViewModel.prototype.authenticationNumber = undefined;

/**
 * @member {String} recordType
 */
TransactionViewModel.prototype.recordType = undefined;

/**
 * @member {String} transactionOrigin
 */
TransactionViewModel.prototype.transactionOrigin = undefined;

/**
 * @member {String} transactionDescription
 */
TransactionViewModel.prototype.transactionDescription = undefined;

/**
 * @member {String} amount
 */
TransactionViewModel.prototype.amount = undefined;

/**
 * @member {String} fee
 */
TransactionViewModel.prototype.fee = undefined;

/**
 * @member {String} availableBalance
 */
TransactionViewModel.prototype.availableBalance = undefined;

/**
 * @member {String} ledgerBalance
 */
TransactionViewModel.prototype.ledgerBalance = undefined;

/**
 * @member {String} clientId
 */
TransactionViewModel.prototype.clientId = undefined;

/**
 * @member {String} terminalID
 */
TransactionViewModel.prototype.terminalID = undefined;

/**
 * @member {String} terminalLocation
 */
TransactionViewModel.prototype.terminalLocation = undefined;

/**
 * @member {String} terminalOwner
 */
TransactionViewModel.prototype.terminalOwner = undefined;

/**
 * @member {String} terminalCity
 */
TransactionViewModel.prototype.terminalCity = undefined;

/**
 * @member {String} terminalState
 */
TransactionViewModel.prototype.terminalState = undefined;

/**
 * @member {String} terminalCountry
 */
TransactionViewModel.prototype.terminalCountry = undefined;

/**
 * @member {String} terminalCurrency
 */
TransactionViewModel.prototype.terminalCurrency = undefined;

/**
 * @member {String} mcc
 */
TransactionViewModel.prototype.mcc = undefined;

/**
 * @member {String} surcharge
 */
TransactionViewModel.prototype.surcharge = undefined;

/**
 * @member {String} issuerFee
 */
TransactionViewModel.prototype.issuerFee = undefined;

/**
 * @member {String} responseCode
 */
TransactionViewModel.prototype.responseCode = undefined;

/**
 * @member {String} foreignExchangeFee
 */
TransactionViewModel.prototype.foreignExchangeFee = undefined;

/**
 * @member {String} currency
 */
TransactionViewModel.prototype.currency = undefined;

/**
 * @member {String} transactionCodeDescription
 */
TransactionViewModel.prototype.transactionCodeDescription = undefined;

/**
 * @member {String} transactionResult
 */
TransactionViewModel.prototype.transactionResult = undefined;

/**
 * @member {String} originalTransactionAmount
 */
TransactionViewModel.prototype.originalTransactionAmount = undefined;

/**
 * @member {Number} conversionRate
 */
TransactionViewModel.prototype.conversionRate = undefined;

/**
 * @member {String} originalHoldAmount
 */
TransactionViewModel.prototype.originalHoldAmount = undefined;

/**
 * @member {String} cardAcceptorIdCode
 */
TransactionViewModel.prototype.cardAcceptorIdCode = undefined;

/**
 * @member {String} actionCodeDescription
 */
TransactionViewModel.prototype.actionCodeDescription = undefined;

/**
 * @member {String} acquiringInstitution
 */
TransactionViewModel.prototype.acquiringInstitution = undefined;

/**
 * @member {String} processor
 */
TransactionViewModel.prototype.processor = undefined;

/**
 * @member {String} posEntryMode
 */
TransactionViewModel.prototype.posEntryMode = undefined;

/**
 * @member {String} atmFee
 */
TransactionViewModel.prototype.atmFee = undefined;

/**
 * @member {String} walletProvider
 */
TransactionViewModel.prototype.walletProvider = undefined;

/**
 * @member {String} cardId
 */
TransactionViewModel.prototype.cardId = undefined;

/**
 * @member {String} walletId
 */
TransactionViewModel.prototype.walletId = undefined;

/**
 * @member {String} uniqueReference
 */
TransactionViewModel.prototype.uniqueReference = undefined;

